
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00001776  0000180a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001776  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000438  0080013e  0080013e  00001848  2**0
                  ALLOC
  3 .comment      00000022  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000186c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000018ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025db  00000000  00000000  00001934  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e8a  00000000  00000000  00003f0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002721  00000000  00000000  00004d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000580  00000000  00000000  000074bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067f  00000000  00000000  00007a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022e8  00000000  00000000  000080bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000a3a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e7       	ldi	r30, 0x76	; 118
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 33       	cpi	r26, 0x3E	; 62
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	25 e0       	ldi	r18, 0x05	; 5
      8c:	ae e3       	ldi	r26, 0x3E	; 62
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 37       	cpi	r26, 0x76	; 118
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <main>
      9e:	0c 94 b9 0b 	jmp	0x1772	; 0x1772 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <error>:
/* The currently output byte */
static uint16_t ibuf = 0;

static void error(void)
{
	TIMER_STOP();
      a6:	8a b1       	in	r24, 0x0a	; 10
      a8:	8f 79       	andi	r24, 0x9F	; 159
      aa:	8a b9       	out	0x0a, r24	; 10
      ac:	15 bc       	out	0x25, r1	; 37
      ae:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	for(;;)
	{
		PORTD ^= (1 << PIN_LED);
      b2:	94 e0       	ldi	r25, 0x04	; 4
      b4:	8b b1       	in	r24, 0x0b	; 11
      b6:	89 27       	eor	r24, r25
      b8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ba:	2f ef       	ldi	r18, 0xFF	; 255
      bc:	39 e6       	ldi	r19, 0x69	; 105
      be:	88 e1       	ldi	r24, 0x18	; 24
      c0:	21 50       	subi	r18, 0x01	; 1
      c2:	30 40       	sbci	r19, 0x00	; 0
      c4:	80 40       	sbci	r24, 0x00	; 0
      c6:	e1 f7       	brne	.-8      	; 0xc0 <error+0x1a>
      c8:	00 c0       	rjmp	.+0      	; 0xca <error+0x24>
      ca:	00 00       	nop
      cc:	f3 cf       	rjmp	.-26     	; 0xb4 <error+0xe>

000000ce <__vector_7>:

	return 0;
}

ISR(TIMER2_COMPA_vect)
{
      ce:	1f 92       	push	r1
      d0:	1f b6       	in	r1, 0x3f	; 63
      d2:	1f 92       	push	r1
      d4:	11 24       	eor	r1, r1
      d6:	2f 93       	push	r18
      d8:	3f 93       	push	r19
      da:	8f 93       	push	r24
      dc:	9f 93       	push	r25
      de:	ef 93       	push	r30
      e0:	ff 93       	push	r31
	if(wi.num_channels == 1)
      e2:	20 91 46 05 	lds	r18, 0x0546	; 0x800546 <wi>
      e6:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
      ea:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <__data_end+0x1>
      ee:	21 30       	cpi	r18, 0x01	; 1
      f0:	d1 f5       	brne	.+116    	; 0x166 <__vector_7+0x98>
	{
		/* mono */
		uint8_t sample = cbuf ? buf1[ibuf] : buf0[ibuf];
      f2:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <cbuf>
      f6:	22 23       	and	r18, r18
      f8:	99 f1       	breq	.+102    	; 0x160 <__vector_7+0x92>
      fa:	8a 5b       	subi	r24, 0xBA	; 186
      fc:	9e 4f       	sbci	r25, 0xFE	; 254
      fe:	fc 01       	movw	r30, r24
     100:	80 81       	ld	r24, Z
		OCR0A = sample;
     102:	87 bd       	out	0x27, r24	; 39
		OCR0B = sample;
     104:	88 bd       	out	0x28, r24	; 40
		if(++ibuf == max[cbuf])
     106:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     10a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <__data_end+0x1>
     10e:	01 96       	adiw	r24, 0x01	; 1
	else
	{
		/* stereo */
		OCR0A = cbuf ? buf1[ibuf] : buf0[ibuf];
		OCR0B = cbuf ? buf1[ibuf + 1] : buf0[ibuf + 1];
		ibuf += 2;
     110:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <__data_end+0x1>
     114:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
		if(ibuf == max[cbuf])
     118:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <cbuf>
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	ee 0f       	add	r30, r30
     120:	ff 1f       	adc	r31, r31
     122:	ee 5b       	subi	r30, 0xBE	; 190
     124:	fe 4f       	sbci	r31, 0xFE	; 254
     126:	20 81       	ld	r18, Z
     128:	31 81       	ldd	r19, Z+1	; 0x01
     12a:	82 17       	cp	r24, r18
     12c:	93 07       	cpc	r25, r19
     12e:	71 f4       	brne	.+28     	; 0x14c <__vector_7+0x7e>
		{
			ibuf = 0;
     130:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <__data_end+0x1>
     134:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
			cbuf = !cbuf;
     138:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <cbuf>
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	91 11       	cpse	r25, r1
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <cbuf>
			flag = 1;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <flag>
		}
	}
}
     14c:	ff 91       	pop	r31
     14e:	ef 91       	pop	r30
     150:	9f 91       	pop	r25
     152:	8f 91       	pop	r24
     154:	3f 91       	pop	r19
     156:	2f 91       	pop	r18
     158:	1f 90       	pop	r1
     15a:	1f be       	out	0x3f, r1	; 63
     15c:	1f 90       	pop	r1
     15e:	18 95       	reti
		uint8_t sample = cbuf ? buf1[ibuf] : buf0[ibuf];
     160:	8a 5b       	subi	r24, 0xBA	; 186
     162:	9c 4f       	sbci	r25, 0xFC	; 252
     164:	cc cf       	rjmp	.-104    	; 0xfe <__vector_7+0x30>
		OCR0A = cbuf ? buf1[ibuf] : buf0[ibuf];
     166:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <cbuf>
     16a:	22 23       	and	r18, r18
     16c:	c1 f0       	breq	.+48     	; 0x19e <__vector_7+0xd0>
     16e:	8a 5b       	subi	r24, 0xBA	; 186
     170:	9e 4f       	sbci	r25, 0xFE	; 254
     172:	fc 01       	movw	r30, r24
     174:	80 81       	ld	r24, Z
     176:	87 bd       	out	0x27, r24	; 39
		OCR0B = cbuf ? buf1[ibuf + 1] : buf0[ibuf + 1];
     178:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <cbuf>
     17c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     180:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <__data_end+0x1>
     184:	22 23       	and	r18, r18
     186:	71 f0       	breq	.+28     	; 0x1a4 <__vector_7+0xd6>
     188:	8a 5b       	subi	r24, 0xBA	; 186
     18a:	9e 4f       	sbci	r25, 0xFE	; 254
     18c:	fc 01       	movw	r30, r24
     18e:	81 81       	ldd	r24, Z+1	; 0x01
     190:	88 bd       	out	0x28, r24	; 40
		ibuf += 2;
     192:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     196:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <__data_end+0x1>
     19a:	02 96       	adiw	r24, 0x02	; 2
     19c:	b9 cf       	rjmp	.-142    	; 0x110 <__vector_7+0x42>
		OCR0A = cbuf ? buf1[ibuf] : buf0[ibuf];
     19e:	8a 5b       	subi	r24, 0xBA	; 186
     1a0:	9c 4f       	sbci	r25, 0xFC	; 252
     1a2:	e7 cf       	rjmp	.-50     	; 0x172 <__vector_7+0xa4>
		OCR0B = cbuf ? buf1[ibuf + 1] : buf0[ibuf + 1];
     1a4:	8a 5b       	subi	r24, 0xBA	; 186
     1a6:	9c 4f       	sbci	r25, 0xFC	; 252
     1a8:	f1 cf       	rjmp	.-30     	; 0x18c <__vector_7+0xbe>

000001aa <_spi_xchg>:

static uint8_t _card_type;

static uint8_t _spi_xchg(uint8_t b)
{
	SPDR = b;
     1aa:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF))) ;
     1ac:	0d b4       	in	r0, 0x2d	; 45
     1ae:	07 fe       	sbrs	r0, 7
     1b0:	fd cf       	rjmp	.-6      	; 0x1ac <_spi_xchg+0x2>
	SPSR &= ~(1 << SPIF);
     1b2:	8d b5       	in	r24, 0x2d	; 45
     1b4:	8f 77       	andi	r24, 0x7F	; 127
     1b6:	8d bd       	out	0x2d, r24	; 45
	return SPDR;
     1b8:	8e b5       	in	r24, 0x2e	; 46
}
     1ba:	08 95       	ret

000001bc <_command>:

static uint8_t _command(uint8_t cmd, uint32_t arg)
{
     1bc:	ff 92       	push	r15
     1be:	0f 93       	push	r16
     1c0:	1f 93       	push	r17
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	c8 2f       	mov	r28, r24
     1c8:	d4 2f       	mov	r29, r20
     1ca:	15 2f       	mov	r17, r21
     1cc:	06 2f       	mov	r16, r22
     1ce:	f7 2e       	mov	r15, r23
	uint8_t i, response;
	_spi_xchg(0xFF);
     1d0:	8f ef       	ldi	r24, 0xFF	; 255
     1d2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
	_spi_xchg(0x40 | cmd);
     1d6:	8c 2f       	mov	r24, r28
     1d8:	80 64       	ori	r24, 0x40	; 64
     1da:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
	_spi_xchg((arg >> 24) & 0xFF);
     1de:	8f 2d       	mov	r24, r15
     1e0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
	_spi_xchg((arg >> 16) & 0xFF);
     1e4:	80 2f       	mov	r24, r16
     1e6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
	_spi_xchg((arg >> 8) & 0xFF);
     1ea:	81 2f       	mov	r24, r17
     1ec:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
	_spi_xchg((arg >> 0) & 0xFF);
     1f0:	8d 2f       	mov	r24, r29
     1f2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
	switch(cmd)
	{
	case CMD_GO_IDLE_STATE:
		_spi_xchg(0x95);
     1f6:	85 e9       	ldi	r24, 0x95	; 149
	switch(cmd)
     1f8:	cc 23       	and	r28, r28
     1fa:	21 f0       	breq	.+8      	; 0x204 <_command+0x48>
		break;

	case CMD_SEND_IF_COND:
		_spi_xchg(0x87);
     1fc:	87 e8       	ldi	r24, 0x87	; 135
	switch(cmd)
     1fe:	c8 30       	cpi	r28, 0x08	; 8
     200:	09 f0       	breq	.+2      	; 0x204 <_command+0x48>
		break;

	default:
		_spi_xchg(0xFF);
     202:	8f ef       	ldi	r24, 0xFF	; 255
		_spi_xchg(0x87);
     204:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
{
     208:	ca e0       	ldi	r28, 0x0A	; 10
		break;
	}

	for(i = 0; i < 10 && ((response = _spi_xchg(0xFF)) == 0xFF); ++i) ;
     20a:	8f ef       	ldi	r24, 0xFF	; 255
     20c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
     210:	8f 3f       	cpi	r24, 0xFF	; 255
     212:	11 f4       	brne	.+4      	; 0x218 <_command+0x5c>
     214:	c1 50       	subi	r28, 0x01	; 1
     216:	c9 f7       	brne	.-14     	; 0x20a <_command+0x4e>
	return response;
}
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	1f 91       	pop	r17
     21e:	0f 91       	pop	r16
     220:	ff 90       	pop	r15
     222:	08 95       	ret

00000224 <sd_init>:

uint8_t sd_init(void)
{
     224:	cf 92       	push	r12
     226:	df 92       	push	r13
     228:	ef 92       	push	r14
     22a:	ff 92       	push	r15
     22c:	0f 93       	push	r16
     22e:	1f 93       	push	r17
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
	uint8_t response;
	uint16_t i;
	uint32_t arg;

	CONF_SPI();
     234:	84 b1       	in	r24, 0x04	; 4
     236:	8c 62       	ori	r24, 0x2C	; 44
     238:	84 b9       	out	0x04, r24	; 4
     23a:	24 98       	cbi	0x04, 4	; 4
	DESELECT();
     23c:	2a 9a       	sbi	0x05, 2	; 5
	SPCR = (0 << SPIE) | (1 << SPE)  | (0 << DORD) | (1 << MSTR) |
     23e:	83 e5       	ldi	r24, 0x53	; 83
     240:	8c bd       	out	0x2c, r24	; 44
		(0 << CPOL) | (0 << CPHA) | (1 << SPR1) | (1 << SPR0);
	SPSR &= ~(1 << SPI2X);
     242:	8d b5       	in	r24, 0x2d	; 45
     244:	8e 7f       	andi	r24, 0xFE	; 254
     246:	8d bd       	out	0x2d, r24	; 45
	_card_type = 0;
     248:	10 92 4e 05 	sts	0x054E, r1	; 0x80054e <_card_type>
     24c:	ca e0       	ldi	r28, 0x0A	; 10
     24e:	d0 e0       	ldi	r29, 0x00	; 0
	for(i = 0; i < 10; ++i)
	{
		_spi_xchg(0xFF);
     250:	8f ef       	ldi	r24, 0xFF	; 255
     252:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
     256:	21 97       	sbiw	r28, 0x01	; 1
	for(i = 0; i < 10; ++i)
     258:	d9 f7       	brne	.-10     	; 0x250 <sd_init+0x2c>
	}

	SELECT();
     25a:	2a 98       	cbi	0x05, 2	; 5
     25c:	00 e0       	ldi	r16, 0x00	; 0
     25e:	12 e0       	ldi	r17, 0x02	; 2
	for(i = 0; ; ++i)
	{
		if(_command(CMD_GO_IDLE_STATE, 0) == IDLE_STATE)
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	ba 01       	movw	r22, r20
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	0e 94 de 00 	call	0x1bc	; 0x1bc <_command>
     26c:	c8 2f       	mov	r28, r24
     26e:	81 30       	cpi	r24, 0x01	; 1
     270:	79 f0       	breq	.+30     	; 0x290 <sd_init+0x6c>
		{
			break;
		}

		if(i == 0x1ff)
     272:	01 50       	subi	r16, 0x01	; 1
     274:	11 09       	sbc	r17, r1
     276:	a1 f7       	brne	.-24     	; 0x260 <sd_init+0x3c>
		{
			DESELECT();
     278:	2a 9a       	sbi	0x05, 2	; 5
			return 1;
     27a:	c1 e0       	ldi	r28, 0x01	; 1
	DESELECT();
	SPCR &= ~((1 << SPR1) | (1 << SPR0));
	SPSR |= (1 << SPI2X);
	_delay_ms(20);
	return 0;
}
     27c:	8c 2f       	mov	r24, r28
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	ef 90       	pop	r14
     28a:	df 90       	pop	r13
     28c:	cf 90       	pop	r12
     28e:	08 95       	ret
	if((_command(CMD_SEND_IF_COND, 0x1AA) & ILLEGAL_CMD) == 0)
     290:	4a ea       	ldi	r20, 0xAA	; 170
     292:	51 e0       	ldi	r21, 0x01	; 1
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	88 e0       	ldi	r24, 0x08	; 8
     29a:	0e 94 de 00 	call	0x1bc	; 0x1bc <_command>
     29e:	82 fd       	sbrc	r24, 2
     2a0:	3b c0       	rjmp	.+118    	; 0x318 <sd_init+0xf4>
		_spi_xchg(0xFF);
     2a2:	8f ef       	ldi	r24, 0xFF	; 255
     2a4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
		_spi_xchg(0xFF);
     2a8:	8f ef       	ldi	r24, 0xFF	; 255
     2aa:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
		if(((_spi_xchg(0xFF) & 0x01) == 0) ||
     2ae:	8f ef       	ldi	r24, 0xFF	; 255
     2b0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
     2b4:	80 ff       	sbrs	r24, 0
     2b6:	e2 cf       	rjmp	.-60     	; 0x27c <sd_init+0x58>
			(_spi_xchg(0xFF) != 0xAA))
     2b8:	8f ef       	ldi	r24, 0xFF	; 255
     2ba:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
		if(((_spi_xchg(0xFF) & 0x01) == 0) ||
     2be:	8a 3a       	cpi	r24, 0xAA	; 170
     2c0:	e9 f6       	brne	.-70     	; 0x27c <sd_init+0x58>
		_card_type |= SD_2;
     2c2:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <_card_type>
     2c6:	82 60       	ori	r24, 0x02	; 2
			_card_type |= SD_1;
     2c8:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <_card_type>
	SELECT();
     2cc:	00 e0       	ldi	r16, 0x00	; 0
     2ce:	10 e8       	ldi	r17, 0x80	; 128
		if(_card_type & (SD_1 | SD_2))
     2d0:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <_card_type>
     2d4:	98 2f       	mov	r25, r24
     2d6:	93 70       	andi	r25, 0x03	; 3
     2d8:	89 f1       	breq	.+98     	; 0x33c <sd_init+0x118>
			arg = 0;
     2da:	c1 2c       	mov	r12, r1
     2dc:	d1 2c       	mov	r13, r1
     2de:	76 01       	movw	r14, r12
			if(_card_type & SD_2)
     2e0:	81 ff       	sbrs	r24, 1
     2e2:	05 c0       	rjmp	.+10     	; 0x2ee <sd_init+0xca>
				arg = 0x40000000;
     2e4:	c1 2c       	mov	r12, r1
     2e6:	d1 2c       	mov	r13, r1
     2e8:	e1 2c       	mov	r14, r1
     2ea:	80 e4       	ldi	r24, 0x40	; 64
     2ec:	f8 2e       	mov	r15, r24
			_command(CMD_APP, 0);
     2ee:	40 e0       	ldi	r20, 0x00	; 0
     2f0:	50 e0       	ldi	r21, 0x00	; 0
     2f2:	ba 01       	movw	r22, r20
     2f4:	87 e3       	ldi	r24, 0x37	; 55
     2f6:	0e 94 de 00 	call	0x1bc	; 0x1bc <_command>
			response = _command(CMD_SD_SEND_OP_COND, arg);
     2fa:	b7 01       	movw	r22, r14
     2fc:	a6 01       	movw	r20, r12
     2fe:	89 e2       	ldi	r24, 0x29	; 41
			response = _command(CMD_SEND_OP_COND, 0);
     300:	0e 94 de 00 	call	0x1bc	; 0x1bc <_command>
		if((response & IDLE_STATE) == 0)
     304:	98 2f       	mov	r25, r24
     306:	91 70       	andi	r25, 0x01	; 1
     308:	80 ff       	sbrs	r24, 0
     30a:	1d c0       	rjmp	.+58     	; 0x346 <sd_init+0x122>
		if(i == 0x7FFF)
     30c:	01 50       	subi	r16, 0x01	; 1
     30e:	11 09       	sbc	r17, r1
     310:	f9 f6       	brne	.-66     	; 0x2d0 <sd_init+0xac>
			DESELECT();
     312:	2a 9a       	sbi	0x05, 2	; 5
			return 1;
     314:	c9 2f       	mov	r28, r25
     316:	b2 cf       	rjmp	.-156    	; 0x27c <sd_init+0x58>
		_command(CMD_APP, 0);
     318:	40 e0       	ldi	r20, 0x00	; 0
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	ba 01       	movw	r22, r20
     31e:	87 e3       	ldi	r24, 0x37	; 55
     320:	0e 94 de 00 	call	0x1bc	; 0x1bc <_command>
		if((_command(CMD_SD_SEND_OP_COND, 0) & ILLEGAL_CMD) == 0)
     324:	40 e0       	ldi	r20, 0x00	; 0
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	ba 01       	movw	r22, r20
     32a:	89 e2       	ldi	r24, 0x29	; 41
     32c:	0e 94 de 00 	call	0x1bc	; 0x1bc <_command>
     330:	82 fd       	sbrc	r24, 2
     332:	cc cf       	rjmp	.-104    	; 0x2cc <sd_init+0xa8>
			_card_type |= SD_1;
     334:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <_card_type>
     338:	81 60       	ori	r24, 0x01	; 1
     33a:	c6 cf       	rjmp	.-116    	; 0x2c8 <sd_init+0xa4>
			response = _command(CMD_SEND_OP_COND, 0);
     33c:	40 e0       	ldi	r20, 0x00	; 0
     33e:	50 e0       	ldi	r21, 0x00	; 0
     340:	ba 01       	movw	r22, r20
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	dd cf       	rjmp	.-70     	; 0x300 <sd_init+0xdc>
	if(_card_type & SD_2)
     346:	d0 91 4e 05 	lds	r29, 0x054E	; 0x80054e <_card_type>
     34a:	d1 ff       	sbrs	r29, 1
     34c:	1b c0       	rjmp	.+54     	; 0x384 <sd_init+0x160>
		if(_command(CMD_READ_OCR, 0))
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	ba 01       	movw	r22, r20
     354:	8a e3       	ldi	r24, 0x3A	; 58
     356:	0e 94 de 00 	call	0x1bc	; 0x1bc <_command>
     35a:	88 23       	and	r24, r24
     35c:	11 f0       	breq	.+4      	; 0x362 <sd_init+0x13e>
			DESELECT();
     35e:	2a 9a       	sbi	0x05, 2	; 5
			return 1;
     360:	8d cf       	rjmp	.-230    	; 0x27c <sd_init+0x58>
		if(_spi_xchg(0xFF) & 0x40)
     362:	8f ef       	ldi	r24, 0xFF	; 255
     364:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
     368:	86 ff       	sbrs	r24, 6
     36a:	03 c0       	rjmp	.+6      	; 0x372 <sd_init+0x14e>
			_card_type |= SD_HC;
     36c:	d4 60       	ori	r29, 0x04	; 4
     36e:	d0 93 4e 05 	sts	0x054E, r29	; 0x80054e <_card_type>
		_spi_xchg(0xFF);
     372:	8f ef       	ldi	r24, 0xFF	; 255
     374:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
		_spi_xchg(0xFF);
     378:	8f ef       	ldi	r24, 0xFF	; 255
     37a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
		_spi_xchg(0xFF);
     37e:	8f ef       	ldi	r24, 0xFF	; 255
     380:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
	if(_command(CMD_SET_BLOCKLEN, 512))
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	52 e0       	ldi	r21, 0x02	; 2
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	80 e1       	ldi	r24, 0x10	; 16
     38e:	0e 94 de 00 	call	0x1bc	; 0x1bc <_command>
		DESELECT();
     392:	2a 9a       	sbi	0x05, 2	; 5
	if(_command(CMD_SET_BLOCKLEN, 512))
     394:	81 11       	cpse	r24, r1
     396:	72 cf       	rjmp	.-284    	; 0x27c <sd_init+0x58>
	SPCR &= ~((1 << SPR1) | (1 << SPR0));
     398:	8c b5       	in	r24, 0x2c	; 44
     39a:	8c 7f       	andi	r24, 0xFC	; 252
     39c:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1 << SPI2X);
     39e:	8d b5       	in	r24, 0x2d	; 45
     3a0:	81 60       	ori	r24, 0x01	; 1
     3a2:	8d bd       	out	0x2d, r24	; 45
     3a4:	2f ef       	ldi	r18, 0xFF	; 255
     3a6:	89 ef       	ldi	r24, 0xF9	; 249
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	21 50       	subi	r18, 0x01	; 1
     3ac:	80 40       	sbci	r24, 0x00	; 0
     3ae:	90 40       	sbci	r25, 0x00	; 0
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <sd_init+0x186>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <sd_init+0x190>
     3b4:	00 00       	nop
	return 0;
     3b6:	c0 e0       	ldi	r28, 0x00	; 0
     3b8:	61 cf       	rjmp	.-318    	; 0x27c <sd_init+0x58>

000003ba <sd_read>:
#endif /* SD_EN_INFO */

#if defined(SD_EN_READ) && SD_EN_READ
uint8_t sd_read
	(uint8_t *buffer, uint32_t block, uint16_t offset, uint16_t count)
{
     3ba:	7f 92       	push	r7
     3bc:	8f 92       	push	r8
     3be:	9f 92       	push	r9
     3c0:	af 92       	push	r10
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	d8 2e       	mov	r13, r24
     3d6:	c9 2e       	mov	r12, r25
     3d8:	79 01       	movw	r14, r18
     3da:	e8 01       	movw	r28, r16
	uint16_t i;
	SELECT();
     3dc:	2a 98       	cbi	0x05, 2	; 5
	if(_command(CMD_READ_SINGLE_BLOCK,
     3de:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <_card_type>
     3e2:	82 fd       	sbrc	r24, 2
     3e4:	07 c0       	rjmp	.+14     	; 0x3f4 <sd_read+0x3a>
     3e6:	89 e0       	ldi	r24, 0x09	; 9
     3e8:	76 95       	lsr	r23
     3ea:	67 95       	ror	r22
     3ec:	57 95       	ror	r21
     3ee:	47 95       	ror	r20
     3f0:	8a 95       	dec	r24
     3f2:	d1 f7       	brne	.-12     	; 0x3e8 <sd_read+0x2e>
     3f4:	81 e1       	ldi	r24, 0x11	; 17
     3f6:	0e 94 de 00 	call	0x1bc	; 0x1bc <_command>
     3fa:	78 2e       	mov	r7, r24
	{
		DESELECT();
		return 1;
	}

	for(i = 0; ; ++i)
     3fc:	10 e0       	ldi	r17, 0x00	; 0
     3fe:	00 e0       	ldi	r16, 0x00	; 0
	if(_command(CMD_READ_SINGLE_BLOCK,
     400:	88 23       	and	r24, r24
     402:	91 f0       	breq	.+36     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
			break;
		}

		if(i == 0xFFFF)
		{
			DESELECT();
     404:	2a 9a       	sbi	0x05, 2	; 5
			return 1;
     406:	77 24       	eor	r7, r7
     408:	73 94       	inc	r7
	_spi_xchg(0xFF);
	_spi_xchg(0xFF);
	DESELECT();
	_spi_xchg(0xFF);
	return 0;
}
     40a:	87 2d       	mov	r24, r7
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	ff 90       	pop	r15
     416:	ef 90       	pop	r14
     418:	df 90       	pop	r13
     41a:	cf 90       	pop	r12
     41c:	bf 90       	pop	r11
     41e:	af 90       	pop	r10
     420:	9f 90       	pop	r9
     422:	8f 90       	pop	r8
     424:	7f 90       	pop	r7
     426:	08 95       	ret
		if(_spi_xchg(0xFF) == 0xFE)
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
     42e:	8e 3f       	cpi	r24, 0xFE	; 254
     430:	59 f1       	breq	.+86     	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
		if(i == 0xFFFF)
     432:	0f 3f       	cpi	r16, 0xFF	; 255
     434:	10 07       	cpc	r17, r16
     436:	31 f3       	breq	.-52     	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
	for(i = 0; ; ++i)
     438:	0f 5f       	subi	r16, 0xFF	; 255
     43a:	1f 4f       	sbci	r17, 0xFF	; 255
		if(_spi_xchg(0xFF) == 0xFE)
     43c:	f5 cf       	rjmp	.-22     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
		_spi_xchg(0xFF);
     43e:	8f ef       	ldi	r24, 0xFF	; 255
     440:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
	for(i = 0; i < offset; ++i)
     444:	0f 5f       	subi	r16, 0xFF	; 255
     446:	1f 4f       	sbci	r17, 0xFF	; 255
     448:	0e 15       	cp	r16, r14
     44a:	1f 05       	cpc	r17, r15
     44c:	c1 f7       	brne	.-16     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
     44e:	57 01       	movw	r10, r14
	for(; i < offset + count; ++i)
     450:	47 01       	movw	r8, r14
     452:	8c 0e       	add	r8, r28
     454:	9d 1e       	adc	r9, r29
     456:	a8 14       	cp	r10, r8
     458:	b9 04       	cpc	r11, r9
     45a:	c8 f0       	brcs	.+50     	; 0x48e <__FUSE_REGION_LENGTH__+0x8e>
     45c:	8e 14       	cp	r8, r14
     45e:	9f 04       	cpc	r9, r15
     460:	10 f4       	brcc	.+4      	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
     462:	d0 e0       	ldi	r29, 0x00	; 0
     464:	c0 e0       	ldi	r28, 0x00	; 0
     466:	ce 0d       	add	r28, r14
     468:	df 1d       	adc	r29, r15
	for(; i < 512; ++i)
     46a:	c1 15       	cp	r28, r1
     46c:	82 e0       	ldi	r24, 0x02	; 2
     46e:	d8 07       	cpc	r29, r24
     470:	e0 f0       	brcs	.+56     	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
	_spi_xchg(0xFF);
     472:	8f ef       	ldi	r24, 0xFF	; 255
     474:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
	_spi_xchg(0xFF);
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
	DESELECT();
     47e:	2a 9a       	sbi	0x05, 2	; 5
	_spi_xchg(0xFF);
     480:	8f ef       	ldi	r24, 0xFF	; 255
     482:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
	return 0;
     486:	c1 cf       	rjmp	.-126    	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
	for(i = 0; i < offset; ++i)
     488:	10 e0       	ldi	r17, 0x00	; 0
     48a:	00 e0       	ldi	r16, 0x00	; 0
     48c:	dd cf       	rjmp	.-70     	; 0x448 <__FUSE_REGION_LENGTH__+0x48>
		*buffer++ = _spi_xchg(0xFF);
     48e:	0d 2d       	mov	r16, r13
     490:	1c 2d       	mov	r17, r12
     492:	8f ef       	ldi	r24, 0xFF	; 255
     494:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
     498:	f8 01       	movw	r30, r16
     49a:	81 93       	st	Z+, r24
     49c:	8f 01       	movw	r16, r30
	for(; i < offset + count; ++i)
     49e:	ff ef       	ldi	r31, 0xFF	; 255
     4a0:	af 1a       	sub	r10, r31
     4a2:	bf 0a       	sbc	r11, r31
		*buffer++ = _spi_xchg(0xFF);
     4a4:	d0 2e       	mov	r13, r16
     4a6:	c1 2e       	mov	r12, r17
     4a8:	d6 cf       	rjmp	.-84     	; 0x456 <__FUSE_REGION_LENGTH__+0x56>
		_spi_xchg(0xFF);
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
     4ac:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_spi_xchg>
	for(; i < 512; ++i)
     4b0:	21 96       	adiw	r28, 0x01	; 1
     4b2:	db cf       	rjmp	.-74     	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>

000004b4 <clust2sect>:

	return ld_u32(buf) & 0x0FFFFFFF;
}

static uint32_t clust2sect(uint32_t cluster)
{
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	00 d0       	rcall	.+0      	; 0x4ba <clust2sect+0x6>
     4ba:	00 d0       	rcall	.+0      	; 0x4bc <clust2sect+0x8>
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
	cluster -= 2;
     4c0:	9b 01       	movw	r18, r22
     4c2:	ac 01       	movw	r20, r24
     4c4:	22 50       	subi	r18, 0x02	; 2
     4c6:	31 09       	sbc	r19, r1
     4c8:	41 09       	sbc	r20, r1
     4ca:	51 09       	sbc	r21, r1
	if(cluster >= (_fs.n_fatent - 2))
     4cc:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <_fs+0x3>
     4d0:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <_fs+0x4>
     4d4:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <_fs+0x5>
     4d8:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <_fs+0x6>
     4dc:	02 97       	sbiw	r24, 0x02	; 2
     4de:	a1 09       	sbc	r26, r1
     4e0:	b1 09       	sbc	r27, r1
     4e2:	28 17       	cp	r18, r24
     4e4:	39 07       	cpc	r19, r25
     4e6:	4a 07       	cpc	r20, r26
     4e8:	5b 07       	cpc	r21, r27
     4ea:	40 f5       	brcc	.+80     	; 0x53c <clust2sect+0x88>
	{
		return 0;
	}

	return cluster * _fs.csize + _fs.database;
     4ec:	a0 91 4f 05 	lds	r26, 0x054F	; 0x80054f <_fs>
     4f0:	b0 e0       	ldi	r27, 0x00	; 0
     4f2:	0e 94 9f 0b 	call	0x173e	; 0x173e <__muluhisi3>
     4f6:	69 83       	std	Y+1, r22	; 0x01
     4f8:	7a 83       	std	Y+2, r23	; 0x02
     4fa:	8b 83       	std	Y+3, r24	; 0x03
     4fc:	9c 83       	std	Y+4, r25	; 0x04
     4fe:	80 91 5e 05 	lds	r24, 0x055E	; 0x80055e <_fs+0xf>
     502:	90 91 5f 05 	lds	r25, 0x055F	; 0x80055f <_fs+0x10>
     506:	a0 91 60 05 	lds	r26, 0x0560	; 0x800560 <_fs+0x11>
     50a:	b0 91 61 05 	lds	r27, 0x0561	; 0x800561 <_fs+0x12>
     50e:	29 81       	ldd	r18, Y+1	; 0x01
     510:	3a 81       	ldd	r19, Y+2	; 0x02
     512:	4b 81       	ldd	r20, Y+3	; 0x03
     514:	5c 81       	ldd	r21, Y+4	; 0x04
     516:	28 0f       	add	r18, r24
     518:	39 1f       	adc	r19, r25
     51a:	4a 1f       	adc	r20, r26
     51c:	5b 1f       	adc	r21, r27
     51e:	29 83       	std	Y+1, r18	; 0x01
     520:	3a 83       	std	Y+2, r19	; 0x02
     522:	4b 83       	std	Y+3, r20	; 0x03
     524:	5c 83       	std	Y+4, r21	; 0x04
}
     526:	69 81       	ldd	r22, Y+1	; 0x01
     528:	7a 81       	ldd	r23, Y+2	; 0x02
     52a:	8b 81       	ldd	r24, Y+3	; 0x03
     52c:	9c 81       	ldd	r25, Y+4	; 0x04
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	08 95       	ret
		return 0;
     53c:	19 82       	std	Y+1, r1	; 0x01
     53e:	1a 82       	std	Y+2, r1	; 0x02
     540:	1b 82       	std	Y+3, r1	; 0x03
     542:	1c 82       	std	Y+4, r1	; 0x04
     544:	f0 cf       	rjmp	.-32     	; 0x526 <clust2sect+0x72>

00000546 <dir_rewind>:
	sfn[11] = (c <= ' ');
	return 0;
}

static uint8_t dir_rewind(dir_t *dj)
{
     546:	0f 93       	push	r16
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	ec 01       	movw	r28, r24
	uint32_t cluster;
	dj->index = 0;
     550:	19 82       	std	Y+1, r1	; 0x01
     552:	18 82       	st	Y, r1
	cluster = dj->sclust;
     554:	6c 81       	ldd	r22, Y+4	; 0x04
     556:	7d 81       	ldd	r23, Y+5	; 0x05
     558:	8e 81       	ldd	r24, Y+6	; 0x06
     55a:	9f 81       	ldd	r25, Y+7	; 0x07
	if(cluster == 1 || cluster >= _fs.n_fatent)
     55c:	61 30       	cpi	r22, 0x01	; 1
     55e:	71 05       	cpc	r23, r1
     560:	81 05       	cpc	r24, r1
     562:	91 05       	cpc	r25, r1
     564:	51 f1       	breq	.+84     	; 0x5ba <dir_rewind+0x74>
     566:	00 91 52 05 	lds	r16, 0x0552	; 0x800552 <_fs+0x3>
     56a:	10 91 53 05 	lds	r17, 0x0553	; 0x800553 <_fs+0x4>
     56e:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <_fs+0x5>
     572:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <_fs+0x6>
     576:	60 17       	cp	r22, r16
     578:	71 07       	cpc	r23, r17
     57a:	82 07       	cpc	r24, r18
     57c:	93 07       	cpc	r25, r19
     57e:	e8 f4       	brcc	.+58     	; 0x5ba <dir_rewind+0x74>
	{
		return 1;
	}

	if(!cluster)
     580:	61 15       	cp	r22, r1
     582:	71 05       	cpc	r23, r1
     584:	81 05       	cpc	r24, r1
     586:	91 05       	cpc	r25, r1
     588:	41 f4       	brne	.+16     	; 0x59a <dir_rewind+0x54>
	{
		cluster = (uint32_t)_fs.dirbase;
     58a:	60 91 5a 05 	lds	r22, 0x055A	; 0x80055a <_fs+0xb>
     58e:	70 91 5b 05 	lds	r23, 0x055B	; 0x80055b <_fs+0xc>
     592:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <_fs+0xd>
     596:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <_fs+0xe>
	}

	dj->clust = cluster;
     59a:	68 87       	std	Y+8, r22	; 0x08
     59c:	79 87       	std	Y+9, r23	; 0x09
     59e:	8a 87       	std	Y+10, r24	; 0x0a
     5a0:	9b 87       	std	Y+11, r25	; 0x0b
	dj->sect = clust2sect(cluster);
     5a2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <clust2sect>
     5a6:	6c 87       	std	Y+12, r22	; 0x0c
     5a8:	7d 87       	std	Y+13, r23	; 0x0d
     5aa:	8e 87       	std	Y+14, r24	; 0x0e
     5ac:	9f 87       	std	Y+15, r25	; 0x0f
	return 0;
     5ae:	80 e0       	ldi	r24, 0x00	; 0
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	08 95       	ret
		return 1;
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	f9 cf       	rjmp	.-14     	; 0x5b0 <dir_rewind+0x6a>

000005be <get_cluster>:
{
     5be:	cf 92       	push	r12
     5c0:	df 92       	push	r13
     5c2:	ef 92       	push	r14
     5c4:	ff 92       	push	r15
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <get_cluster+0xe>
     5cc:	00 d0       	rcall	.+0      	; 0x5ce <get_cluster+0x10>
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	89 83       	std	Y+1, r24	; 0x01
     5d4:	9a 83       	std	Y+2, r25	; 0x02
	cluster = ld_u16(dir + DIR_CLUSTER_HI);
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	9a 81       	ldd	r25, Y+2	; 0x02
     5da:	44 96       	adiw	r24, 0x14	; 20
     5dc:	0e 94 9b 09 	call	0x1336	; 0x1336 <ld_u16>
     5e0:	b0 e0       	ldi	r27, 0x00	; 0
     5e2:	a0 e0       	ldi	r26, 0x00	; 0
	cluster <<= 16;
     5e4:	7c 01       	movw	r14, r24
     5e6:	dd 24       	eor	r13, r13
     5e8:	cc 24       	eor	r12, r12
	cluster |= ld_u16(dir + DIR_CLUSTER_LO);
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	9a 81       	ldd	r25, Y+2	; 0x02
     5ee:	4a 96       	adiw	r24, 0x1a	; 26
     5f0:	0e 94 9b 09 	call	0x1336	; 0x1336 <ld_u16>
     5f4:	b0 e0       	ldi	r27, 0x00	; 0
     5f6:	a0 e0       	ldi	r26, 0x00	; 0
     5f8:	9c 01       	movw	r18, r24
     5fa:	ad 01       	movw	r20, r26
     5fc:	2c 29       	or	r18, r12
     5fe:	3d 29       	or	r19, r13
     600:	4e 29       	or	r20, r14
     602:	5f 29       	or	r21, r15
}
     604:	ca 01       	movw	r24, r20
     606:	b9 01       	movw	r22, r18
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	ff 90       	pop	r15
     616:	ef 90       	pop	r14
     618:	df 90       	pop	r13
     61a:	cf 90       	pop	r12
     61c:	08 95       	ret

0000061e <get_fat>:
{
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	28 97       	sbiw	r28, 0x08	; 8
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
     636:	46 2f       	mov	r20, r22
     638:	57 2f       	mov	r21, r23
     63a:	bc 01       	movw	r22, r24
	if(cluster < 2 || cluster >= _fs.n_fatent)
     63c:	42 30       	cpi	r20, 0x02	; 2
     63e:	51 05       	cpc	r21, r1
     640:	61 05       	cpc	r22, r1
     642:	71 05       	cpc	r23, r1
     644:	08 f4       	brcc	.+2      	; 0x648 <get_fat+0x2a>
     646:	49 c0       	rjmp	.+146    	; 0x6da <get_fat+0xbc>
     648:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <_fs+0x3>
     64c:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <_fs+0x4>
     650:	a0 91 54 05 	lds	r26, 0x0554	; 0x800554 <_fs+0x5>
     654:	b0 91 55 05 	lds	r27, 0x0555	; 0x800555 <_fs+0x6>
     658:	48 17       	cp	r20, r24
     65a:	59 07       	cpc	r21, r25
     65c:	6a 07       	cpc	r22, r26
     65e:	7b 07       	cpc	r23, r27
     660:	e0 f5       	brcc	.+120    	; 0x6da <get_fat+0xbc>
		((uint16_t)cluster % 128) * 4, 4))
     662:	9a 01       	movw	r18, r20
     664:	2f 77       	andi	r18, 0x7F	; 127
     666:	33 27       	eor	r19, r19
	if(sd_read(buf, _fs.fatbase + cluster / 128,
     668:	22 0f       	add	r18, r18
     66a:	33 1f       	adc	r19, r19
     66c:	22 0f       	add	r18, r18
     66e:	33 1f       	adc	r19, r19
     670:	97 e0       	ldi	r25, 0x07	; 7
     672:	76 95       	lsr	r23
     674:	67 95       	ror	r22
     676:	57 95       	ror	r21
     678:	47 95       	ror	r20
     67a:	9a 95       	dec	r25
     67c:	d1 f7       	brne	.-12     	; 0x672 <get_fat+0x54>
     67e:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <_fs+0x7>
     682:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <_fs+0x8>
     686:	a0 91 58 05 	lds	r26, 0x0558	; 0x800558 <_fs+0x9>
     68a:	b0 91 59 05 	lds	r27, 0x0559	; 0x800559 <_fs+0xa>
     68e:	48 0f       	add	r20, r24
     690:	59 1f       	adc	r21, r25
     692:	6a 1f       	adc	r22, r26
     694:	7b 1f       	adc	r23, r27
     696:	04 e0       	ldi	r16, 0x04	; 4
     698:	10 e0       	ldi	r17, 0x00	; 0
     69a:	ce 01       	movw	r24, r28
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sd_read>
     6a2:	81 11       	cpse	r24, r1
     6a4:	1a c0       	rjmp	.+52     	; 0x6da <get_fat+0xbc>
	return ld_u32(buf) & 0x0FFFFFFF;
     6a6:	ce 01       	movw	r24, r28
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	0e 94 87 09 	call	0x130e	; 0x130e <ld_u32>
     6ae:	dc 01       	movw	r26, r24
     6b0:	cb 01       	movw	r24, r22
     6b2:	bf 70       	andi	r27, 0x0F	; 15
		return 1;
     6b4:	8d 83       	std	Y+5, r24	; 0x05
     6b6:	9e 83       	std	Y+6, r25	; 0x06
     6b8:	af 83       	std	Y+7, r26	; 0x07
     6ba:	b8 87       	std	Y+8, r27	; 0x08
}
     6bc:	6d 81       	ldd	r22, Y+5	; 0x05
     6be:	7e 81       	ldd	r23, Y+6	; 0x06
     6c0:	8f 81       	ldd	r24, Y+7	; 0x07
     6c2:	98 85       	ldd	r25, Y+8	; 0x08
     6c4:	28 96       	adiw	r28, 0x08	; 8
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	08 95       	ret
		return 1;
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	a0 e0       	ldi	r26, 0x00	; 0
     6e0:	b0 e0       	ldi	r27, 0x00	; 0
     6e2:	e8 cf       	rjmp	.-48     	; 0x6b4 <get_fat+0x96>

000006e4 <dir_next>:

static uint8_t dir_next(dir_t *dj)
{
     6e4:	cf 92       	push	r12
     6e6:	df 92       	push	r13
     6e8:	ef 92       	push	r14
     6ea:	ff 92       	push	r15
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	2a 97       	sbiw	r28, 0x0a	; 10
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	f8 94       	cli
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	0f be       	out	0x3f, r0	; 63
     702:	cd bf       	out	0x3d, r28	; 61
     704:	8d 83       	std	Y+5, r24	; 0x05
     706:	9e 83       	std	Y+6, r25	; 0x06
	uint32_t clst;
	uint16_t i;
	if(!(i = dj->index + 1) || !dj->sect)
     708:	ad 81       	ldd	r26, Y+5	; 0x05
     70a:	be 81       	ldd	r27, Y+6	; 0x06
     70c:	0d 91       	ld	r16, X+
     70e:	1c 91       	ld	r17, X
     710:	0f 5f       	subi	r16, 0xFF	; 255
     712:	1f 4f       	sbci	r17, 0xFF	; 255
     714:	81 f4       	brne	.+32     	; 0x736 <dir_next+0x52>
	{
		return 1;
     716:	81 e0       	ldi	r24, 0x01	; 1
		}
	}

	dj->index = i;
	return 0;
}
     718:	2a 96       	adiw	r28, 0x0a	; 10
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	ff 90       	pop	r15
     72e:	ef 90       	pop	r14
     730:	df 90       	pop	r13
     732:	cf 90       	pop	r12
     734:	08 95       	ret
	if(!(i = dj->index + 1) || !dj->sect)
     736:	ed 81       	ldd	r30, Y+5	; 0x05
     738:	fe 81       	ldd	r31, Y+6	; 0x06
     73a:	84 85       	ldd	r24, Z+12	; 0x0c
     73c:	95 85       	ldd	r25, Z+13	; 0x0d
     73e:	a6 85       	ldd	r26, Z+14	; 0x0e
     740:	b7 85       	ldd	r27, Z+15	; 0x0f
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	a1 05       	cpc	r26, r1
     746:	b1 05       	cpc	r27, r1
     748:	31 f3       	breq	.-52     	; 0x716 <dir_next+0x32>
	if(!(i % 16))
     74a:	98 01       	movw	r18, r16
     74c:	2f 70       	andi	r18, 0x0F	; 15
     74e:	33 27       	eor	r19, r19
     750:	23 2b       	or	r18, r19
     752:	d1 f4       	brne	.+52     	; 0x788 <dir_next+0xa4>
		dj->sect++;
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	a1 1d       	adc	r26, r1
     758:	b1 1d       	adc	r27, r1
     75a:	84 87       	std	Z+12, r24	; 0x0c
     75c:	95 87       	std	Z+13, r25	; 0x0d
     75e:	a6 87       	std	Z+14, r26	; 0x0e
     760:	b7 87       	std	Z+15, r27	; 0x0f
		if(dj->clust == 0)
     762:	80 85       	ldd	r24, Z+8	; 0x08
     764:	91 85       	ldd	r25, Z+9	; 0x09
     766:	a2 85       	ldd	r26, Z+10	; 0x0a
     768:	b3 85       	ldd	r27, Z+11	; 0x0b
     76a:	89 83       	std	Y+1, r24	; 0x01
     76c:	9a 83       	std	Y+2, r25	; 0x02
     76e:	ab 83       	std	Y+3, r26	; 0x03
     770:	bc 83       	std	Y+4, r27	; 0x04
     772:	89 2b       	or	r24, r25
     774:	8a 2b       	or	r24, r26
     776:	8b 2b       	or	r24, r27
     778:	69 f4       	brne	.+26     	; 0x794 <dir_next+0xb0>
			if(i >= _fs.n_rootdir)
     77a:	80 91 50 05 	lds	r24, 0x0550	; 0x800550 <_fs+0x1>
     77e:	90 91 51 05 	lds	r25, 0x0551	; 0x800551 <_fs+0x2>
     782:	08 17       	cp	r16, r24
     784:	19 07       	cpc	r17, r25
     786:	38 f6       	brcc	.-114    	; 0x716 <dir_next+0x32>
	dj->index = i;
     788:	ed 81       	ldd	r30, Y+5	; 0x05
     78a:	fe 81       	ldd	r31, Y+6	; 0x06
     78c:	11 83       	std	Z+1, r17	; 0x01
     78e:	00 83       	st	Z, r16
	return 0;
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	c2 cf       	rjmp	.-124    	; 0x718 <dir_next+0x34>
			if(((i / 16) & (_fs.csize - 1)) == 0)
     794:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <_fs>
     798:	81 50       	subi	r24, 0x01	; 1
     79a:	99 0b       	sbc	r25, r25
     79c:	98 01       	movw	r18, r16
     79e:	44 e0       	ldi	r20, 0x04	; 4
     7a0:	36 95       	lsr	r19
     7a2:	27 95       	ror	r18
     7a4:	4a 95       	dec	r20
     7a6:	e1 f7       	brne	.-8      	; 0x7a0 <dir_next+0xbc>
     7a8:	82 23       	and	r24, r18
     7aa:	93 23       	and	r25, r19
     7ac:	89 2b       	or	r24, r25
     7ae:	61 f7       	brne	.-40     	; 0x788 <dir_next+0xa4>
				clst = get_fat(dj->clust);
     7b0:	69 81       	ldd	r22, Y+1	; 0x01
     7b2:	7a 81       	ldd	r23, Y+2	; 0x02
     7b4:	8b 81       	ldd	r24, Y+3	; 0x03
     7b6:	9c 81       	ldd	r25, Y+4	; 0x04
     7b8:	0e 94 0f 03 	call	0x61e	; 0x61e <get_fat>
				if(clst <= 1)
     7bc:	62 30       	cpi	r22, 0x02	; 2
     7be:	71 05       	cpc	r23, r1
     7c0:	81 05       	cpc	r24, r1
     7c2:	91 05       	cpc	r25, r1
     7c4:	08 f4       	brcc	.+2      	; 0x7c8 <dir_next+0xe4>
     7c6:	a7 cf       	rjmp	.-178    	; 0x716 <dir_next+0x32>
				if(clst >= _fs.n_fatent)
     7c8:	c0 90 52 05 	lds	r12, 0x0552	; 0x800552 <_fs+0x3>
     7cc:	d0 90 53 05 	lds	r13, 0x0553	; 0x800553 <_fs+0x4>
     7d0:	e0 90 54 05 	lds	r14, 0x0554	; 0x800554 <_fs+0x5>
     7d4:	f0 90 55 05 	lds	r15, 0x0555	; 0x800555 <_fs+0x6>
     7d8:	6c 15       	cp	r22, r12
     7da:	7d 05       	cpc	r23, r13
     7dc:	8e 05       	cpc	r24, r14
     7de:	9f 05       	cpc	r25, r15
     7e0:	08 f0       	brcs	.+2      	; 0x7e4 <dir_next+0x100>
     7e2:	99 cf       	rjmp	.-206    	; 0x716 <dir_next+0x32>
				dj->clust = clst;
     7e4:	ed 81       	ldd	r30, Y+5	; 0x05
     7e6:	fe 81       	ldd	r31, Y+6	; 0x06
     7e8:	60 87       	std	Z+8, r22	; 0x08
     7ea:	71 87       	std	Z+9, r23	; 0x09
     7ec:	82 87       	std	Z+10, r24	; 0x0a
     7ee:	93 87       	std	Z+11, r25	; 0x0b
				dj->sect = clust2sect(clst);
     7f0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <clust2sect>
     7f4:	ad 81       	ldd	r26, Y+5	; 0x05
     7f6:	be 81       	ldd	r27, Y+6	; 0x06
     7f8:	1c 96       	adiw	r26, 0x0c	; 12
     7fa:	6d 93       	st	X+, r22
     7fc:	7d 93       	st	X+, r23
     7fe:	8d 93       	st	X+, r24
     800:	9c 93       	st	X, r25
     802:	1f 97       	sbiw	r26, 0x0f	; 15
     804:	c1 cf       	rjmp	.-126    	; 0x788 <dir_next+0xa4>

00000806 <check_fs>:

	return res;
}

static uint8_t check_fs(uint8_t *buf, uint32_t sect)
{
     806:	cf 92       	push	r12
     808:	df 92       	push	r13
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	d8 2f       	mov	r29, r24
     818:	c9 2f       	mov	r28, r25
     81a:	6a 01       	movw	r12, r20
     81c:	7b 01       	movw	r14, r22
	if(sd_read(buf, sect, 510, 2))
     81e:	02 e0       	ldi	r16, 0x02	; 2
     820:	10 e0       	ldi	r17, 0x00	; 0
     822:	2e ef       	ldi	r18, 0xFE	; 254
     824:	31 e0       	ldi	r19, 0x01	; 1
     826:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sd_read>
     82a:	81 11       	cpse	r24, r1
     82c:	24 c0       	rjmp	.+72     	; 0x876 <check_fs+0x70>
	{
		return 3;
	}

	if(ld_u16(buf) != 0xAA55)
     82e:	8d 2f       	mov	r24, r29
     830:	9c 2f       	mov	r25, r28
     832:	0e 94 9b 09 	call	0x1336	; 0x1336 <ld_u16>
     836:	85 35       	cpi	r24, 0x55	; 85
     838:	9a 4a       	sbci	r25, 0xAA	; 170
     83a:	f9 f4       	brne	.+62     	; 0x87a <check_fs+0x74>
	{
		return 2;
	}

	if(!sd_read(buf, sect, BS_FILESYSTEM_TYPE_32, 2)
     83c:	22 e5       	ldi	r18, 0x52	; 82
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	a6 01       	movw	r20, r12
     842:	b7 01       	movw	r22, r14
     844:	8d 2f       	mov	r24, r29
     846:	9c 2f       	mov	r25, r28
     848:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sd_read>
     84c:	81 11       	cpse	r24, r1
     84e:	17 c0       	rjmp	.+46     	; 0x87e <check_fs+0x78>
		&& ld_u16(buf) == 0x4146)
     850:	8d 2f       	mov	r24, r29
     852:	9c 2f       	mov	r25, r28
     854:	0e 94 9b 09 	call	0x1336	; 0x1336 <ld_u16>
     858:	9c 01       	movw	r18, r24
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	26 34       	cpi	r18, 0x46	; 70
     85e:	31 44       	sbci	r19, 0x41	; 65
     860:	09 f4       	brne	.+2      	; 0x864 <check_fs+0x5e>
     862:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;
	}

	return 1;
}
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	ff 90       	pop	r15
     86e:	ef 90       	pop	r14
     870:	df 90       	pop	r13
     872:	cf 90       	pop	r12
     874:	08 95       	ret
		return 3;
     876:	83 e0       	ldi	r24, 0x03	; 3
     878:	f5 cf       	rjmp	.-22     	; 0x864 <check_fs+0x5e>
		return 2;
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	f3 cf       	rjmp	.-26     	; 0x864 <check_fs+0x5e>
	return 1;
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	f1 cf       	rjmp	.-30     	; 0x864 <check_fs+0x5e>

00000882 <follow_path>:
{
     882:	af 92       	push	r10
     884:	bf 92       	push	r11
     886:	cf 92       	push	r12
     888:	df 92       	push	r13
     88a:	ef 92       	push	r14
     88c:	ff 92       	push	r15
     88e:	0f 93       	push	r16
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	7c 01       	movw	r14, r24
     898:	6b 01       	movw	r12, r22
     89a:	ca 01       	movw	r24, r20
	while(*path == ' ')
     89c:	5c 01       	movw	r10, r24
     89e:	dc 01       	movw	r26, r24
     8a0:	2c 91       	ld	r18, X
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	20 32       	cpi	r18, 0x20	; 32
     8a6:	d1 f3       	breq	.-12     	; 0x89c <follow_path+0x1a>
	if(*path == '/')
     8a8:	2f 32       	cpi	r18, 0x2F	; 47
     8aa:	09 f4       	brne	.+2      	; 0x8ae <follow_path+0x2c>
		path++;
     8ac:	5c 01       	movw	r10, r24
	dj->sclust = 0;
     8ae:	f7 01       	movw	r30, r14
     8b0:	14 82       	std	Z+4, r1	; 0x04
     8b2:	15 82       	std	Z+5, r1	; 0x05
     8b4:	16 82       	std	Z+6, r1	; 0x06
     8b6:	17 82       	std	Z+7, r1	; 0x07
	if((uint8_t)*path < ' ')
     8b8:	d5 01       	movw	r26, r10
     8ba:	8c 91       	ld	r24, X
     8bc:	80 32       	cpi	r24, 0x20	; 32
     8be:	08 f0       	brcs	.+2      	; 0x8c2 <follow_path+0x40>
     8c0:	65 c0       	rjmp	.+202    	; 0x98c <__stack+0x8d>
		res = dir_rewind(dj);
     8c2:	c7 01       	movw	r24, r14
     8c4:	0e 94 a3 02 	call	0x546	; 0x546 <dir_rewind>
     8c8:	c8 2f       	mov	r28, r24
		dir[0] = 0;
     8ca:	f6 01       	movw	r30, r12
     8cc:	10 82       	st	Z, r1
}
     8ce:	8c 2f       	mov	r24, r28
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	ef 90       	pop	r14
     8dc:	df 90       	pop	r13
     8de:	cf 90       	pop	r12
     8e0:	bf 90       	pop	r11
     8e2:	af 90       	pop	r10
     8e4:	08 95       	ret
	*path = &p[si];
     8e6:	a3 0e       	add	r10, r19
     8e8:	b1 1c       	adc	r11, r1
	sfn[11] = (c <= ' ');
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	81 32       	cpi	r24, 0x21	; 33
     8ee:	08 f0       	brcs	.+2      	; 0x8f2 <follow_path+0x70>
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	9b 87       	std	Y+11, r25	; 0x0b
	if((res = dir_rewind(dj)))
     8f4:	c7 01       	movw	r24, r14
     8f6:	0e 94 a3 02 	call	0x546	; 0x546 <dir_rewind>
     8fa:	c8 2f       	mov	r28, r24
     8fc:	81 11       	cpse	r24, r1
     8fe:	e7 cf       	rjmp	.-50     	; 0x8ce <follow_path+0x4c>
		if((res = sd_read(dir, dj->sect, (dj->index % 16) * 32, 32)))
     900:	f7 01       	movw	r30, r14
     902:	20 81       	ld	r18, Z
     904:	31 81       	ldd	r19, Z+1	; 0x01
     906:	2f 70       	andi	r18, 0x0F	; 15
     908:	33 27       	eor	r19, r19
     90a:	85 e0       	ldi	r24, 0x05	; 5
     90c:	22 0f       	add	r18, r18
     90e:	33 1f       	adc	r19, r19
     910:	8a 95       	dec	r24
     912:	e1 f7       	brne	.-8      	; 0x90c <__stack+0xd>
     914:	44 85       	ldd	r20, Z+12	; 0x0c
     916:	55 85       	ldd	r21, Z+13	; 0x0d
     918:	66 85       	ldd	r22, Z+14	; 0x0e
     91a:	77 85       	ldd	r23, Z+15	; 0x0f
     91c:	00 e2       	ldi	r16, 0x20	; 32
     91e:	10 e0       	ldi	r17, 0x00	; 0
     920:	c6 01       	movw	r24, r12
     922:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sd_read>
     926:	c8 2f       	mov	r28, r24
     928:	81 11       	cpse	r24, r1
     92a:	d1 cf       	rjmp	.-94     	; 0x8ce <follow_path+0x4c>
		if(dir[DIR_NAME] == 0)
     92c:	d6 01       	movw	r26, r12
     92e:	8c 91       	ld	r24, X
     930:	81 11       	cpse	r24, r1
     932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0x39>
			res = 1;
     934:	c1 e0       	ldi	r28, 0x01	; 1
     936:	cb cf       	rjmp	.-106    	; 0x8ce <follow_path+0x4c>
		if(!(dir[DIR_ATTR] & AM_VOL) && mem_cmp(dir, dj->fn, 11))
     938:	f6 01       	movw	r30, r12
     93a:	83 85       	ldd	r24, Z+11	; 0x0b
     93c:	c8 2f       	mov	r28, r24
     93e:	c8 70       	andi	r28, 0x08	; 8
     940:	83 ff       	sbrs	r24, 3
     942:	04 c0       	rjmp	.+8      	; 0x94c <__stack+0x4d>
		res = dir_next(dj);
     944:	c7 01       	movw	r24, r14
     946:	0e 94 72 03 	call	0x6e4	; 0x6e4 <dir_next>
     94a:	d7 cf       	rjmp	.-82     	; 0x8fa <follow_path+0x78>
		if(!(dir[DIR_ATTR] & AM_VOL) && mem_cmp(dir, dj->fn, 11))
     94c:	d7 01       	movw	r26, r14
     94e:	12 96       	adiw	r26, 0x02	; 2
     950:	6d 91       	ld	r22, X+
     952:	7c 91       	ld	r23, X
     954:	4b e0       	ldi	r20, 0x0B	; 11
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	c6 01       	movw	r24, r12
     95a:	0e 94 aa 09 	call	0x1354	; 0x1354 <mem_cmp>
     95e:	88 23       	and	r24, r24
     960:	89 f3       	breq	.-30     	; 0x944 <__stack+0x45>
			if(dj->fn[11])
     962:	d7 01       	movw	r26, r14
     964:	12 96       	adiw	r26, 0x02	; 2
     966:	ed 91       	ld	r30, X+
     968:	fc 91       	ld	r31, X
     96a:	83 85       	ldd	r24, Z+11	; 0x0b
     96c:	81 11       	cpse	r24, r1
     96e:	af cf       	rjmp	.-162    	; 0x8ce <follow_path+0x4c>
			if(!(dir[DIR_ATTR] & AM_DIR))
     970:	f6 01       	movw	r30, r12
     972:	83 85       	ldd	r24, Z+11	; 0x0b
     974:	84 ff       	sbrs	r24, 4
     976:	de cf       	rjmp	.-68     	; 0x934 <__stack+0x35>
			dj->sclust = get_cluster(dir);
     978:	c6 01       	movw	r24, r12
     97a:	0e 94 df 02 	call	0x5be	; 0x5be <get_cluster>
     97e:	d7 01       	movw	r26, r14
     980:	14 96       	adiw	r26, 0x04	; 4
     982:	6d 93       	st	X+, r22
     984:	7d 93       	st	X+, r23
     986:	8d 93       	st	X+, r24
     988:	9c 93       	st	X, r25
     98a:	17 97       	sbiw	r26, 0x07	; 7
			if((res = create_name(dj, &path)))
     98c:	d7 01       	movw	r26, r14
     98e:	12 96       	adiw	r26, 0x02	; 2
     990:	cd 91       	ld	r28, X+
     992:	dc 91       	ld	r29, X
	mem_set(sfn, ' ', 11);
     994:	4b e0       	ldi	r20, 0x0B	; 11
     996:	50 e0       	ldi	r21, 0x00	; 0
     998:	60 e2       	ldi	r22, 0x20	; 32
     99a:	ce 01       	movw	r24, r28
     99c:	0e 94 9f 09 	call	0x133e	; 0x133e <mem_set>
	i = 0;
     9a0:	20 e0       	ldi	r18, 0x00	; 0
	si = 0;
     9a2:	e0 e0       	ldi	r30, 0x00	; 0
	ni = 8;
     9a4:	98 e0       	ldi	r25, 0x08	; 8
		c = p[si++];
     9a6:	31 e0       	ldi	r19, 0x01	; 1
     9a8:	3e 0f       	add	r19, r30
     9aa:	ea 0d       	add	r30, r10
     9ac:	fb 2d       	mov	r31, r11
     9ae:	f1 1d       	adc	r31, r1
     9b0:	80 81       	ld	r24, Z
		if(c <= ' ' || c == '/')
     9b2:	81 32       	cpi	r24, 0x21	; 33
     9b4:	08 f4       	brcc	.+2      	; 0x9b8 <__stack+0xb9>
     9b6:	97 cf       	rjmp	.-210    	; 0x8e6 <follow_path+0x64>
     9b8:	8f 32       	cpi	r24, 0x2F	; 47
     9ba:	09 f4       	brne	.+2      	; 0x9be <__stack+0xbf>
     9bc:	94 cf       	rjmp	.-216    	; 0x8e6 <follow_path+0x64>
		if (c == '.' || i >= ni)
     9be:	8e 32       	cpi	r24, 0x2E	; 46
     9c0:	99 f0       	breq	.+38     	; 0x9e8 <__stack+0xe9>
     9c2:	29 17       	cp	r18, r25
     9c4:	08 f0       	brcs	.+2      	; 0x9c8 <__stack+0xc9>
     9c6:	8f cf       	rjmp	.-226    	; 0x8e6 <follow_path+0x64>
		if(c >= 'a' && c <= 'z')
     9c8:	4f e9       	ldi	r20, 0x9F	; 159
     9ca:	48 0f       	add	r20, r24
     9cc:	4a 31       	cpi	r20, 0x1A	; 26
     9ce:	08 f4       	brcc	.+2      	; 0x9d2 <__stack+0xd3>
			c -= 'a' - 'A';
     9d0:	80 52       	subi	r24, 0x20	; 32
		sfn[i++] = c;
     9d2:	fe 01       	movw	r30, r28
     9d4:	e2 0f       	add	r30, r18
     9d6:	f1 1d       	adc	r31, r1
     9d8:	80 83       	st	Z, r24
     9da:	89 2f       	mov	r24, r25
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	92 0f       	add	r25, r18
			ni = 11;
     9e0:	29 2f       	mov	r18, r25
		c = p[si++];
     9e2:	e3 2f       	mov	r30, r19
     9e4:	98 2f       	mov	r25, r24
     9e6:	df cf       	rjmp	.-66     	; 0x9a6 <__stack+0xa7>
			if(ni != 8 || c != '.')
     9e8:	98 30       	cpi	r25, 0x08	; 8
     9ea:	09 f0       	breq	.+2      	; 0x9ee <__stack+0xef>
     9ec:	7c cf       	rjmp	.-264    	; 0x8e6 <follow_path+0x64>
			ni = 11;
     9ee:	8b e0       	ldi	r24, 0x0B	; 11
     9f0:	f7 cf       	rjmp	.-18     	; 0x9e0 <__stack+0xe1>

000009f2 <fat_mount>:

uint8_t fat_mount(void)
{
     9f2:	cf 92       	push	r12
     9f4:	df 92       	push	r13
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
     a06:	ac 97       	sbiw	r28, 0x2c	; 44
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
	uint8_t fmt, buf[36];
	uint32_t bsect, fsize, tsect, mclst;
	bsect = 0;
	if((fmt = check_fs(buf, bsect)))
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	ba 01       	movw	r22, r20
     a18:	ce 01       	movw	r24, r28
     a1a:	01 96       	adiw	r24, 0x01	; 1
     a1c:	0e 94 03 04 	call	0x806	; 0x806 <check_fs>
	bsect = 0;
     a20:	c1 2c       	mov	r12, r1
     a22:	d1 2c       	mov	r13, r1
     a24:	76 01       	movw	r14, r12
	if((fmt = check_fs(buf, bsect)))
     a26:	88 23       	and	r24, r24
     a28:	79 f1       	breq	.+94     	; 0xa88 <fat_mount+0x96>
	{
		if(!sd_read(buf, bsect, MBR_TABLE, 16))
     a2a:	00 e1       	ldi	r16, 0x10	; 16
     a2c:	10 e0       	ldi	r17, 0x00	; 0
     a2e:	2e eb       	ldi	r18, 0xBE	; 190
     a30:	31 e0       	ldi	r19, 0x01	; 1
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	ba 01       	movw	r22, r20
     a38:	ce 01       	movw	r24, r28
     a3a:	01 96       	adiw	r24, 0x01	; 1
     a3c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sd_read>
     a40:	88 23       	and	r24, r24
     a42:	89 f0       	breq	.+34     	; 0xa66 <fat_mount+0x74>
		}
	}

	if(fmt)
	{
		return 1;
     a44:	11 e0       	ldi	r17, 0x01	; 1
	}

	_fs.dirbase = ld_u32(buf + (BPB_ROOT_CLUSTER - 13));
	_fs.database = _fs.fatbase + fsize + _fs.n_rootdir / 16;
	return 0;
}
     a46:	81 2f       	mov	r24, r17
     a48:	ac 96       	adiw	r28, 0x2c	; 44
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	de bf       	out	0x3e, r29	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	cd bf       	out	0x3d, r28	; 61
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	cf 90       	pop	r12
     a64:	08 95       	ret
			if(buf[4])
     a66:	8d 81       	ldd	r24, Y+5	; 0x05
     a68:	88 23       	and	r24, r24
     a6a:	61 f3       	breq	.-40     	; 0xa44 <fat_mount+0x52>
				bsect = ld_u32(&buf[8]);
     a6c:	ce 01       	movw	r24, r28
     a6e:	09 96       	adiw	r24, 0x09	; 9
     a70:	0e 94 87 09 	call	0x130e	; 0x130e <ld_u32>
     a74:	6b 01       	movw	r12, r22
     a76:	7c 01       	movw	r14, r24
				fmt = check_fs(buf, bsect);
     a78:	bc 01       	movw	r22, r24
     a7a:	a6 01       	movw	r20, r12
     a7c:	ce 01       	movw	r24, r28
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	0e 94 03 04 	call	0x806	; 0x806 <check_fs>
	if(fmt)
     a84:	81 11       	cpse	r24, r1
     a86:	de cf       	rjmp	.-68     	; 0xa44 <fat_mount+0x52>
	if(sd_read(buf, bsect, 13, sizeof(buf)))
     a88:	04 e2       	ldi	r16, 0x24	; 36
     a8a:	10 e0       	ldi	r17, 0x00	; 0
     a8c:	2d e0       	ldi	r18, 0x0D	; 13
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	b7 01       	movw	r22, r14
     a92:	a6 01       	movw	r20, r12
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sd_read>
     a9c:	18 2f       	mov	r17, r24
     a9e:	81 11       	cpse	r24, r1
     aa0:	d1 cf       	rjmp	.-94     	; 0xa44 <fat_mount+0x52>
	if(!(fsize = ld_u16(buf + BPB_FAT_SIZE_16 - 13)))
     aa2:	ce 01       	movw	r24, r28
     aa4:	0a 96       	adiw	r24, 0x0a	; 10
     aa6:	0e 94 9b 09 	call	0x1336	; 0x1336 <ld_u16>
     aaa:	9c 01       	movw	r18, r24
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	89 2b       	or	r24, r25
     ab2:	31 f4       	brne	.+12     	; 0xac0 <fat_mount+0xce>
		fsize = ld_u32(buf + BPB_FAT_SIZE_32 - 13);
     ab4:	ce 01       	movw	r24, r28
     ab6:	48 96       	adiw	r24, 0x18	; 24
     ab8:	0e 94 87 09 	call	0x130e	; 0x130e <ld_u32>
     abc:	9b 01       	movw	r18, r22
     abe:	ac 01       	movw	r20, r24
	fsize *= buf[PBP_NUM_FATS - 13];
     ac0:	ac 81       	ldd	r26, Y+4	; 0x04
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	0e 94 9f 0b 	call	0x173e	; 0x173e <__muluhisi3>
     ac8:	69 a7       	std	Y+41, r22	; 0x29
     aca:	7a a7       	std	Y+42, r23	; 0x2a
     acc:	8b a7       	std	Y+43, r24	; 0x2b
     ace:	9c a7       	std	Y+44, r25	; 0x2c
	_fs.fatbase = bsect + ld_u16(buf + BPB_RESERVED_SECTOR_COUNT - 13);
     ad0:	ce 01       	movw	r24, r28
     ad2:	02 96       	adiw	r24, 0x02	; 2
     ad4:	0e 94 9b 09 	call	0x1336	; 0x1336 <ld_u16>
     ad8:	c8 0e       	add	r12, r24
     ada:	d9 1e       	adc	r13, r25
     adc:	e1 1c       	adc	r14, r1
     ade:	f1 1c       	adc	r15, r1
     ae0:	c0 92 56 05 	sts	0x0556, r12	; 0x800556 <_fs+0x7>
     ae4:	d0 92 57 05 	sts	0x0557, r13	; 0x800557 <_fs+0x8>
     ae8:	e0 92 58 05 	sts	0x0558, r14	; 0x800558 <_fs+0x9>
     aec:	f0 92 59 05 	sts	0x0559, r15	; 0x800559 <_fs+0xa>
	_fs.csize = buf[BPB_SECTORS_PER_CLUSTER - 13];
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <_fs>
	_fs.n_rootdir = ld_u16(buf + PBP_ROOT_ENTRY_COUNT - 13);
     af6:	ce 01       	movw	r24, r28
     af8:	05 96       	adiw	r24, 0x05	; 5
     afa:	0e 94 9b 09 	call	0x1336	; 0x1336 <ld_u16>
     afe:	90 93 51 05 	sts	0x0551, r25	; 0x800551 <_fs+0x2>
     b02:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <_fs+0x1>
	if(!(tsect = ld_u16(buf + BPB_TOTAL_SECTORS_16 - 13)))
     b06:	ce 01       	movw	r24, r28
     b08:	07 96       	adiw	r24, 0x07	; 7
     b0a:	0e 94 9b 09 	call	0x1336	; 0x1336 <ld_u16>
     b0e:	6c 01       	movw	r12, r24
     b10:	f1 2c       	mov	r15, r1
     b12:	e1 2c       	mov	r14, r1
     b14:	89 2b       	or	r24, r25
     b16:	31 f4       	brne	.+12     	; 0xb24 <fat_mount+0x132>
		tsect = ld_u32(buf + BPB_TOTAL_SECTORS_32 - 13);
     b18:	ce 01       	movw	r24, r28
     b1a:	44 96       	adiw	r24, 0x14	; 20
     b1c:	0e 94 87 09 	call	0x130e	; 0x130e <ld_u32>
     b20:	6b 01       	movw	r12, r22
     b22:	7c 01       	movw	r14, r24
	mclst = (tsect - ld_u16(buf + BPB_RESERVED_SECTOR_COUNT - 13) -
     b24:	ce 01       	movw	r24, r28
     b26:	02 96       	adiw	r24, 0x02	; 2
     b28:	0e 94 9b 09 	call	0x1336	; 0x1336 <ld_u16>
		fsize - _fs.n_rootdir / 16) / _fs.csize + 2;
     b2c:	20 91 50 05 	lds	r18, 0x0550	; 0x800550 <_fs+0x1>
     b30:	30 91 51 05 	lds	r19, 0x0551	; 0x800551 <_fs+0x2>
     b34:	44 e0       	ldi	r20, 0x04	; 4
     b36:	36 95       	lsr	r19
     b38:	27 95       	ror	r18
     b3a:	4a 95       	dec	r20
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <fat_mount+0x144>
     b3e:	49 a5       	ldd	r20, Y+41	; 0x29
     b40:	5a a5       	ldd	r21, Y+42	; 0x2a
     b42:	6b a5       	ldd	r22, Y+43	; 0x2b
     b44:	7c a5       	ldd	r23, Y+44	; 0x2c
     b46:	42 0f       	add	r20, r18
     b48:	53 1f       	adc	r21, r19
     b4a:	61 1d       	adc	r22, r1
     b4c:	71 1d       	adc	r23, r1
     b4e:	c4 1a       	sub	r12, r20
     b50:	d5 0a       	sbc	r13, r21
     b52:	e6 0a       	sbc	r14, r22
     b54:	f7 0a       	sbc	r15, r23
     b56:	a7 01       	movw	r20, r14
     b58:	96 01       	movw	r18, r12
     b5a:	28 1b       	sub	r18, r24
     b5c:	39 0b       	sbc	r19, r25
     b5e:	41 09       	sbc	r20, r1
     b60:	51 09       	sbc	r21, r1
     b62:	2d a3       	std	Y+37, r18	; 0x25
     b64:	3e a3       	std	Y+38, r19	; 0x26
     b66:	4f a3       	std	Y+39, r20	; 0x27
     b68:	58 a7       	std	Y+40, r21	; 0x28
     b6a:	20 91 4f 05 	lds	r18, 0x054F	; 0x80054f <_fs>
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	6d a1       	ldd	r22, Y+37	; 0x25
     b76:	7e a1       	ldd	r23, Y+38	; 0x26
     b78:	8f a1       	ldd	r24, Y+39	; 0x27
     b7a:	98 a5       	ldd	r25, Y+40	; 0x28
     b7c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__udivmodsi4>
	mclst = (tsect - ld_u16(buf + BPB_RESERVED_SECTOR_COUNT - 13) -
     b80:	da 01       	movw	r26, r20
     b82:	c9 01       	movw	r24, r18
     b84:	02 96       	adiw	r24, 0x02	; 2
     b86:	a1 1d       	adc	r26, r1
     b88:	b1 1d       	adc	r27, r1
	_fs.n_fatent = (uint32_t)mclst;
     b8a:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <_fs+0x3>
     b8e:	90 93 53 05 	sts	0x0553, r25	; 0x800553 <_fs+0x4>
     b92:	a0 93 54 05 	sts	0x0554, r26	; 0x800554 <_fs+0x5>
     b96:	b0 93 55 05 	sts	0x0555, r27	; 0x800555 <_fs+0x6>
	if(!(mclst >= 0xFFF7))
     b9a:	87 3f       	cpi	r24, 0xF7	; 247
     b9c:	9f 4f       	sbci	r25, 0xFF	; 255
     b9e:	a1 05       	cpc	r26, r1
     ba0:	b1 05       	cpc	r27, r1
     ba2:	08 f4       	brcc	.+2      	; 0xba6 <fat_mount+0x1b4>
     ba4:	4f cf       	rjmp	.-354    	; 0xa44 <fat_mount+0x52>
	_fs.dirbase = ld_u32(buf + (BPB_ROOT_CLUSTER - 13));
     ba6:	ce 01       	movw	r24, r28
     ba8:	80 96       	adiw	r24, 0x20	; 32
     baa:	0e 94 87 09 	call	0x130e	; 0x130e <ld_u32>
     bae:	60 93 5a 05 	sts	0x055A, r22	; 0x80055a <_fs+0xb>
     bb2:	70 93 5b 05 	sts	0x055B, r23	; 0x80055b <_fs+0xc>
     bb6:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <_fs+0xd>
     bba:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <_fs+0xe>
	_fs.database = _fs.fatbase + fsize + _fs.n_rootdir / 16;
     bbe:	20 91 50 05 	lds	r18, 0x0550	; 0x800550 <_fs+0x1>
     bc2:	30 91 51 05 	lds	r19, 0x0551	; 0x800551 <_fs+0x2>
     bc6:	84 e0       	ldi	r24, 0x04	; 4
     bc8:	36 95       	lsr	r19
     bca:	27 95       	ror	r18
     bcc:	8a 95       	dec	r24
     bce:	e1 f7       	brne	.-8      	; 0xbc8 <fat_mount+0x1d6>
     bd0:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <_fs+0x7>
     bd4:	90 91 57 05 	lds	r25, 0x0557	; 0x800557 <_fs+0x8>
     bd8:	a0 91 58 05 	lds	r26, 0x0558	; 0x800558 <_fs+0x9>
     bdc:	b0 91 59 05 	lds	r27, 0x0559	; 0x800559 <_fs+0xa>
     be0:	82 0f       	add	r24, r18
     be2:	93 1f       	adc	r25, r19
     be4:	a1 1d       	adc	r26, r1
     be6:	b1 1d       	adc	r27, r1
     be8:	29 a5       	ldd	r18, Y+41	; 0x29
     bea:	3a a5       	ldd	r19, Y+42	; 0x2a
     bec:	4b a5       	ldd	r20, Y+43	; 0x2b
     bee:	5c a5       	ldd	r21, Y+44	; 0x2c
     bf0:	82 0f       	add	r24, r18
     bf2:	93 1f       	adc	r25, r19
     bf4:	a4 1f       	adc	r26, r20
     bf6:	b5 1f       	adc	r27, r21
     bf8:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <_fs+0xf>
     bfc:	90 93 5f 05 	sts	0x055F, r25	; 0x80055f <_fs+0x10>
     c00:	a0 93 60 05 	sts	0x0560, r26	; 0x800560 <_fs+0x11>
     c04:	b0 93 61 05 	sts	0x0561, r27	; 0x800561 <_fs+0x12>
	return 0;
     c08:	1e cf       	rjmp	.-452    	; 0xa46 <fat_mount+0x54>

00000c0a <fat_fopen>:

uint8_t fat_fopen(const char *path)
{
     c0a:	1f 93       	push	r17
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	ec 97       	sbiw	r28, 0x3c	; 60
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	ac 01       	movw	r20, r24
	dir_t dj;
	uint8_t sp[12], dir[32];
	dj.fn = sp;
     c22:	ce 01       	movw	r24, r28
     c24:	c1 96       	adiw	r24, 0x31	; 49
     c26:	9c a3       	std	Y+36, r25	; 0x24
     c28:	8b a3       	std	Y+35, r24	; 0x23
	if(follow_path(&dj, dir, path))
     c2a:	be 01       	movw	r22, r28
     c2c:	6f 5f       	subi	r22, 0xFF	; 255
     c2e:	7f 4f       	sbci	r23, 0xFF	; 255
     c30:	40 97       	sbiw	r24, 0x10	; 16
     c32:	0e 94 41 04 	call	0x882	; 0x882 <follow_path>
	{
		return 1;
	}

	if(!dir[0] || (dir[DIR_ATTR] & AM_DIR))
     c36:	99 81       	ldd	r25, Y+1	; 0x01
     c38:	99 23       	and	r25, r25
     c3a:	79 f1       	breq	.+94     	; 0xc9a <fat_fopen+0x90>
     c3c:	1c 85       	ldd	r17, Y+12	; 0x0c
     c3e:	10 71       	andi	r17, 0x10	; 16
     c40:	18 2b       	or	r17, r24
     c42:	59 f5       	brne	.+86     	; 0xc9a <fat_fopen+0x90>
	{
		return 1;
	}

	_fs.org_clust = get_cluster(dir);
     c44:	ce 01       	movw	r24, r28
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	0e 94 df 02 	call	0x5be	; 0x5be <get_cluster>
     c4c:	60 93 62 05 	sts	0x0562, r22	; 0x800562 <_fs+0x13>
     c50:	70 93 63 05 	sts	0x0563, r23	; 0x800563 <_fs+0x14>
     c54:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <_fs+0x15>
     c58:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <_fs+0x16>
	fat_fsize = ld_u32(dir + DIR_FILESIZE);
     c5c:	ce 01       	movw	r24, r28
     c5e:	4d 96       	adiw	r24, 0x1d	; 29
     c60:	0e 94 87 09 	call	0x130e	; 0x130e <ld_u32>
     c64:	60 93 72 05 	sts	0x0572, r22	; 0x800572 <fat_fsize>
     c68:	70 93 73 05 	sts	0x0573, r23	; 0x800573 <fat_fsize+0x1>
     c6c:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <fat_fsize+0x2>
     c70:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <fat_fsize+0x3>
	fat_ftell = 0;
     c74:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <fat_ftell>
     c78:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <fat_ftell+0x1>
     c7c:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <fat_ftell+0x2>
     c80:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <fat_ftell+0x3>
	return 0;
}
     c84:	81 2f       	mov	r24, r17
     c86:	ec 96       	adiw	r28, 0x3c	; 60
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	1f 91       	pop	r17
     c98:	08 95       	ret
		return 1;
     c9a:	11 e0       	ldi	r17, 0x01	; 1
     c9c:	f3 cf       	rjmp	.-26     	; 0xc84 <fat_fopen+0x7a>

00000c9e <fat_fread>:

uint8_t fat_fread(void *buf, uint16_t btr, uint16_t *br)
{
     c9e:	8f 92       	push	r8
     ca0:	9f 92       	push	r9
     ca2:	af 92       	push	r10
     ca4:	bf 92       	push	r11
     ca6:	cf 92       	push	r12
     ca8:	df 92       	push	r13
     caa:	ef 92       	push	r14
     cac:	ff 92       	push	r15
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <fat_fread+0x1a>
     cb8:	00 d0       	rcall	.+0      	; 0xcba <fat_fread+0x1c>
     cba:	00 d0       	rcall	.+0      	; 0xcbc <fat_fread+0x1e>
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	7c 01       	movw	r14, r24
     cc2:	6d 83       	std	Y+5, r22	; 0x05
     cc4:	7e 83       	std	Y+6, r23	; 0x06
     cc6:	6a 01       	movw	r12, r20
	uint32_t clst, sect, remain;
	uint16_t rcnt;
	uint8_t cs, *rbuf;
	rbuf = buf;
	*br = 0;
     cc8:	da 01       	movw	r26, r20
     cca:	1d 92       	st	X+, r1
     ccc:	1c 92       	st	X, r1
	remain = fat_fsize - fat_ftell;
     cce:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <fat_fsize>
     cd2:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <fat_fsize+0x1>
     cd6:	a0 91 74 05 	lds	r26, 0x0574	; 0x800574 <fat_fsize+0x2>
     cda:	b0 91 75 05 	lds	r27, 0x0575	; 0x800575 <fat_fsize+0x3>
     cde:	40 91 6e 05 	lds	r20, 0x056E	; 0x80056e <fat_ftell>
     ce2:	50 91 6f 05 	lds	r21, 0x056F	; 0x80056f <fat_ftell+0x1>
     ce6:	60 91 70 05 	lds	r22, 0x0570	; 0x800570 <fat_ftell+0x2>
     cea:	70 91 71 05 	lds	r23, 0x0571	; 0x800571 <fat_ftell+0x3>
     cee:	84 1b       	sub	r24, r20
     cf0:	95 0b       	sbc	r25, r21
     cf2:	a6 0b       	sbc	r26, r22
     cf4:	b7 0b       	sbc	r27, r23
	if(btr > remain)
     cf6:	ed 81       	ldd	r30, Y+5	; 0x05
     cf8:	fe 81       	ldd	r31, Y+6	; 0x06
     cfa:	af 01       	movw	r20, r30
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	84 17       	cp	r24, r20
     d02:	95 07       	cpc	r25, r21
     d04:	a6 07       	cpc	r26, r22
     d06:	b7 07       	cpc	r27, r23
     d08:	10 f4       	brcc	.+4      	; 0xd0e <fat_fread+0x70>
	{
		btr = (uint16_t)remain;
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
			}

			_fs.dsect = sect + cs;
		}

		if((rcnt = 512 - (uint16_t)fat_ftell % 512) > btr)
     d0e:	a1 2c       	mov	r10, r1
     d10:	32 e0       	ldi	r19, 0x02	; 2
     d12:	b3 2e       	mov	r11, r19
	while(btr)
     d14:	2d 81       	ldd	r18, Y+5	; 0x05
     d16:	3e 81       	ldd	r19, Y+6	; 0x06
     d18:	23 2b       	or	r18, r19
     d1a:	11 f4       	brne	.+4      	; 0xd20 <fat_fread+0x82>
		{
			rbuf += rcnt;
		}
	}

	return 0;
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	39 c0       	rjmp	.+114    	; 0xd92 <fat_fread+0xf4>
		if((fat_ftell % 512) == 0)
     d20:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <fat_ftell>
     d24:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <fat_ftell+0x1>
     d28:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <fat_ftell+0x2>
     d2c:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <fat_ftell+0x3>
     d30:	ac 01       	movw	r20, r24
     d32:	bd 01       	movw	r22, r26
     d34:	51 70       	andi	r21, 0x01	; 1
     d36:	66 27       	eor	r22, r22
     d38:	77 27       	eor	r23, r23
     d3a:	45 2b       	or	r20, r21
     d3c:	46 2b       	or	r20, r22
     d3e:	47 2b       	or	r20, r23
     d40:	09 f0       	breq	.+2      	; 0xd44 <fat_fread+0xa6>
     d42:	6f c0       	rjmp	.+222    	; 0xe22 <fat_fread+0x184>
			if(!(cs = (uint8_t)(fat_ftell / 512 & (_fs.csize - 1))))
     d44:	90 90 4f 05 	lds	r9, 0x054F	; 0x80054f <_fs>
     d48:	9a 94       	dec	r9
     d4a:	ac 01       	movw	r20, r24
     d4c:	bd 01       	movw	r22, r26
     d4e:	29 e0       	ldi	r18, 0x09	; 9
     d50:	76 95       	lsr	r23
     d52:	67 95       	ror	r22
     d54:	57 95       	ror	r21
     d56:	47 95       	ror	r20
     d58:	2a 95       	dec	r18
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <fat_fread+0xb2>
     d5c:	94 22       	and	r9, r20
     d5e:	e9 f5       	brne	.+122    	; 0xdda <fat_fread+0x13c>
					get_fat(_fs.curr_clust) : _fs.org_clust) <= 1)
     d60:	89 2b       	or	r24, r25
     d62:	8a 2b       	or	r24, r26
     d64:	8b 2b       	or	r24, r27
     d66:	41 f1       	breq	.+80     	; 0xdb8 <fat_fread+0x11a>
     d68:	20 91 66 05 	lds	r18, 0x0566	; 0x800566 <_fs+0x17>
     d6c:	30 91 67 05 	lds	r19, 0x0567	; 0x800567 <_fs+0x18>
     d70:	40 91 68 05 	lds	r20, 0x0568	; 0x800568 <_fs+0x19>
     d74:	50 91 69 05 	lds	r21, 0x0569	; 0x800569 <_fs+0x1a>
     d78:	ca 01       	movw	r24, r20
     d7a:	b9 01       	movw	r22, r18
     d7c:	0e 94 0f 03 	call	0x61e	; 0x61e <get_fat>
     d80:	46 2f       	mov	r20, r22
     d82:	57 2f       	mov	r21, r23
     d84:	bc 01       	movw	r22, r24
				if((clst = fat_ftell ?
     d86:	42 30       	cpi	r20, 0x02	; 2
     d88:	51 05       	cpc	r21, r1
     d8a:	61 05       	cpc	r22, r1
     d8c:	71 05       	cpc	r23, r1
     d8e:	e8 f4       	brcc	.+58     	; 0xdca <fat_fread+0x12c>
					return 1;
     d90:	81 e0       	ldi	r24, 0x01	; 1
}
     d92:	26 96       	adiw	r28, 0x06	; 6
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	df 90       	pop	r13
     dac:	cf 90       	pop	r12
     dae:	bf 90       	pop	r11
     db0:	af 90       	pop	r10
     db2:	9f 90       	pop	r9
     db4:	8f 90       	pop	r8
     db6:	08 95       	ret
					get_fat(_fs.curr_clust) : _fs.org_clust) <= 1)
     db8:	40 91 62 05 	lds	r20, 0x0562	; 0x800562 <_fs+0x13>
     dbc:	50 91 63 05 	lds	r21, 0x0563	; 0x800563 <_fs+0x14>
     dc0:	60 91 64 05 	lds	r22, 0x0564	; 0x800564 <_fs+0x15>
     dc4:	70 91 65 05 	lds	r23, 0x0565	; 0x800565 <_fs+0x16>
     dc8:	de cf       	rjmp	.-68     	; 0xd86 <fat_fread+0xe8>
				_fs.curr_clust = clst;
     dca:	40 93 66 05 	sts	0x0566, r20	; 0x800566 <_fs+0x17>
     dce:	50 93 67 05 	sts	0x0567, r21	; 0x800567 <_fs+0x18>
     dd2:	60 93 68 05 	sts	0x0568, r22	; 0x800568 <_fs+0x19>
     dd6:	70 93 69 05 	sts	0x0569, r23	; 0x800569 <_fs+0x1a>
			if(!(sect = clust2sect(_fs.curr_clust)))
     dda:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <_fs+0x17>
     dde:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <_fs+0x18>
     de2:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <_fs+0x19>
     de6:	b0 91 69 05 	lds	r27, 0x0569	; 0x800569 <_fs+0x1a>
     dea:	89 83       	std	Y+1, r24	; 0x01
     dec:	9a 83       	std	Y+2, r25	; 0x02
     dee:	ab 83       	std	Y+3, r26	; 0x03
     df0:	bc 83       	std	Y+4, r27	; 0x04
     df2:	bc 01       	movw	r22, r24
     df4:	cd 01       	movw	r24, r26
     df6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <clust2sect>
     dfa:	46 2f       	mov	r20, r22
     dfc:	57 2f       	mov	r21, r23
     dfe:	bc 01       	movw	r22, r24
     e00:	41 15       	cp	r20, r1
     e02:	51 05       	cpc	r21, r1
     e04:	61 05       	cpc	r22, r1
     e06:	71 05       	cpc	r23, r1
     e08:	19 f2       	breq	.-122    	; 0xd90 <fat_fread+0xf2>
			_fs.dsect = sect + cs;
     e0a:	49 0d       	add	r20, r9
     e0c:	51 1d       	adc	r21, r1
     e0e:	61 1d       	adc	r22, r1
     e10:	71 1d       	adc	r23, r1
     e12:	40 93 6a 05 	sts	0x056A, r20	; 0x80056a <_fs+0x1b>
     e16:	50 93 6b 05 	sts	0x056B, r21	; 0x80056b <_fs+0x1c>
     e1a:	60 93 6c 05 	sts	0x056C, r22	; 0x80056c <_fs+0x1d>
     e1e:	70 93 6d 05 	sts	0x056D, r23	; 0x80056d <_fs+0x1e>
		if((rcnt = 512 - (uint16_t)fat_ftell % 512) > btr)
     e22:	20 91 6e 05 	lds	r18, 0x056E	; 0x80056e <fat_ftell>
     e26:	30 91 6f 05 	lds	r19, 0x056F	; 0x80056f <fat_ftell+0x1>
     e2a:	31 70       	andi	r19, 0x01	; 1
     e2c:	c5 01       	movw	r24, r10
     e2e:	82 1b       	sub	r24, r18
     e30:	93 0b       	sbc	r25, r19
     e32:	8d 80       	ldd	r8, Y+5	; 0x05
     e34:	9e 80       	ldd	r9, Y+6	; 0x06
     e36:	88 15       	cp	r24, r8
     e38:	99 05       	cpc	r25, r9
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <fat_fread+0x1a0>
     e3c:	4c 01       	movw	r8, r24
		if(sd_read(rbuf, _fs.dsect, (uint16_t)fat_ftell % 512, rcnt))
     e3e:	40 91 6a 05 	lds	r20, 0x056A	; 0x80056a <_fs+0x1b>
     e42:	50 91 6b 05 	lds	r21, 0x056B	; 0x80056b <_fs+0x1c>
     e46:	60 91 6c 05 	lds	r22, 0x056C	; 0x80056c <_fs+0x1d>
     e4a:	70 91 6d 05 	lds	r23, 0x056D	; 0x80056d <_fs+0x1e>
     e4e:	84 01       	movw	r16, r8
     e50:	c7 01       	movw	r24, r14
     e52:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sd_read>
     e56:	81 11       	cpse	r24, r1
     e58:	9b cf       	rjmp	.-202    	; 0xd90 <fat_fread+0xf2>
		fat_ftell += rcnt;
     e5a:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <fat_ftell>
     e5e:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <fat_ftell+0x1>
     e62:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <fat_ftell+0x2>
     e66:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <fat_ftell+0x3>
     e6a:	88 0d       	add	r24, r8
     e6c:	99 1d       	adc	r25, r9
     e6e:	a1 1d       	adc	r26, r1
     e70:	b1 1d       	adc	r27, r1
     e72:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <fat_ftell>
     e76:	90 93 6f 05 	sts	0x056F, r25	; 0x80056f <fat_ftell+0x1>
     e7a:	a0 93 70 05 	sts	0x0570, r26	; 0x800570 <fat_ftell+0x2>
     e7e:	b0 93 71 05 	sts	0x0571, r27	; 0x800571 <fat_ftell+0x3>
		btr -= rcnt;
     e82:	ad 81       	ldd	r26, Y+5	; 0x05
     e84:	be 81       	ldd	r27, Y+6	; 0x06
     e86:	a8 19       	sub	r26, r8
     e88:	b9 09       	sbc	r27, r9
     e8a:	be 83       	std	Y+6, r27	; 0x06
     e8c:	ad 83       	std	Y+5, r26	; 0x05
		*br += rcnt;
     e8e:	f6 01       	movw	r30, r12
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	88 0d       	add	r24, r8
     e96:	99 1d       	adc	r25, r9
     e98:	91 83       	std	Z+1, r25	; 0x01
     e9a:	80 83       	st	Z, r24
		if(rbuf)
     e9c:	e1 14       	cp	r14, r1
     e9e:	f1 04       	cpc	r15, r1
     ea0:	09 f4       	brne	.+2      	; 0xea4 <fat_fread+0x206>
     ea2:	38 cf       	rjmp	.-400    	; 0xd14 <fat_fread+0x76>
			rbuf += rcnt;
     ea4:	e8 0c       	add	r14, r8
     ea6:	f9 1c       	adc	r15, r9
     ea8:	35 cf       	rjmp	.-406    	; 0xd14 <fat_fread+0x76>

00000eaa <fat_fseek>:

uint8_t fat_fseek(uint32_t offset)
{
     eaa:	4f 92       	push	r4
     eac:	5f 92       	push	r5
     eae:	6f 92       	push	r6
     eb0:	7f 92       	push	r7
     eb2:	8f 92       	push	r8
     eb4:	9f 92       	push	r9
     eb6:	af 92       	push	r10
     eb8:	bf 92       	push	r11
     eba:	cf 92       	push	r12
     ebc:	df 92       	push	r13
     ebe:	ef 92       	push	r14
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	28 97       	sbiw	r28, 0x08	; 8
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	46 2f       	mov	r20, r22
     edc:	57 2f       	mov	r21, r23
     ede:	bc 01       	movw	r22, r24
	uint32_t clst, bcs, sect, ifptr;
	if(offset > fat_fsize)
     ee0:	c0 90 72 05 	lds	r12, 0x0572	; 0x800572 <fat_fsize>
     ee4:	d0 90 73 05 	lds	r13, 0x0573	; 0x800573 <fat_fsize+0x1>
     ee8:	e0 90 74 05 	lds	r14, 0x0574	; 0x800574 <fat_fsize+0x2>
     eec:	f0 90 75 05 	lds	r15, 0x0575	; 0x800575 <fat_fsize+0x3>
     ef0:	4c 15       	cp	r20, r12
     ef2:	5d 05       	cpc	r21, r13
     ef4:	6e 05       	cpc	r22, r14
     ef6:	7f 05       	cpc	r23, r15
     ef8:	10 f4       	brcc	.+4      	; 0xefe <fat_fseek+0x54>
     efa:	6a 01       	movw	r12, r20
     efc:	7c 01       	movw	r14, r24
	{
		offset = fat_fsize;
	}

	ifptr = fat_ftell;
     efe:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <fat_ftell>
     f02:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <fat_ftell+0x1>
     f06:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <fat_ftell+0x2>
     f0a:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <fat_ftell+0x3>
	fat_ftell = 0;
     f0e:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <fat_ftell>
     f12:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <fat_ftell+0x1>
     f16:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <fat_ftell+0x2>
     f1a:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <fat_ftell+0x3>
	if(offset > 0)
     f1e:	c1 14       	cp	r12, r1
     f20:	d1 04       	cpc	r13, r1
     f22:	e1 04       	cpc	r14, r1
     f24:	f1 04       	cpc	r15, r1
     f26:	09 f4       	brne	.+2      	; 0xf2a <fat_fseek+0x80>
     f28:	9e c0       	rjmp	.+316    	; 0x1066 <fat_fseek+0x1bc>
	{
		bcs = (uint32_t)_fs.csize * 512;
     f2a:	80 90 4f 05 	lds	r8, 0x054F	; 0x80054f <_fs>
     f2e:	91 2c       	mov	r9, r1
     f30:	b1 2c       	mov	r11, r1
     f32:	a1 2c       	mov	r10, r1
     f34:	39 e0       	ldi	r19, 0x09	; 9
     f36:	88 0c       	add	r8, r8
     f38:	99 1c       	adc	r9, r9
     f3a:	aa 1c       	adc	r10, r10
     f3c:	bb 1c       	adc	r11, r11
     f3e:	3a 95       	dec	r19
     f40:	d1 f7       	brne	.-12     	; 0xf36 <fat_fseek+0x8c>
		if(ifptr > 0 && (offset - 1) / bcs >= (ifptr - 1) / bcs)
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	a1 05       	cpc	r26, r1
     f46:	b1 05       	cpc	r27, r1
     f48:	09 f4       	brne	.+2      	; 0xf4c <fat_fseek+0xa2>
     f4a:	8f c0       	rjmp	.+286    	; 0x106a <fat_fseek+0x1c0>
     f4c:	9c 01       	movw	r18, r24
     f4e:	ad 01       	movw	r20, r26
     f50:	21 50       	subi	r18, 0x01	; 1
     f52:	31 09       	sbc	r19, r1
     f54:	41 09       	sbc	r20, r1
     f56:	51 09       	sbc	r21, r1
     f58:	29 83       	std	Y+1, r18	; 0x01
     f5a:	3a 83       	std	Y+2, r19	; 0x02
     f5c:	4b 83       	std	Y+3, r20	; 0x03
     f5e:	5c 83       	std	Y+4, r21	; 0x04
     f60:	d7 01       	movw	r26, r14
     f62:	c6 01       	movw	r24, r12
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	a1 09       	sbc	r26, r1
     f68:	b1 09       	sbc	r27, r1
     f6a:	bc 01       	movw	r22, r24
     f6c:	cd 01       	movw	r24, r26
     f6e:	a5 01       	movw	r20, r10
     f70:	94 01       	movw	r18, r8
     f72:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__udivmodsi4>
     f76:	29 01       	movw	r4, r18
     f78:	3a 01       	movw	r6, r20
     f7a:	69 81       	ldd	r22, Y+1	; 0x01
     f7c:	7a 81       	ldd	r23, Y+2	; 0x02
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	9c 81       	ldd	r25, Y+4	; 0x04
     f82:	a5 01       	movw	r20, r10
     f84:	94 01       	movw	r18, r8
     f86:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__udivmodsi4>
     f8a:	42 16       	cp	r4, r18
     f8c:	53 06       	cpc	r5, r19
     f8e:	64 06       	cpc	r6, r20
     f90:	75 06       	cpc	r7, r21
     f92:	08 f4       	brcc	.+2      	; 0xf96 <fat_fseek+0xec>
     f94:	6a c0       	rjmp	.+212    	; 0x106a <fat_fseek+0x1c0>
		{
			fat_ftell = (ifptr - 1) & ~(bcs - 1);
     f96:	88 27       	eor	r24, r24
     f98:	99 27       	eor	r25, r25
     f9a:	dc 01       	movw	r26, r24
     f9c:	88 19       	sub	r24, r8
     f9e:	99 09       	sbc	r25, r9
     fa0:	aa 09       	sbc	r26, r10
     fa2:	bb 09       	sbc	r27, r11
     fa4:	29 81       	ldd	r18, Y+1	; 0x01
     fa6:	3a 81       	ldd	r19, Y+2	; 0x02
     fa8:	4b 81       	ldd	r20, Y+3	; 0x03
     faa:	5c 81       	ldd	r21, Y+4	; 0x04
     fac:	82 23       	and	r24, r18
     fae:	93 23       	and	r25, r19
     fb0:	a4 23       	and	r26, r20
     fb2:	b5 23       	and	r27, r21
     fb4:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <fat_ftell>
     fb8:	90 93 6f 05 	sts	0x056F, r25	; 0x80056f <fat_ftell+0x1>
     fbc:	a0 93 70 05 	sts	0x0570, r26	; 0x800570 <fat_ftell+0x2>
     fc0:	b0 93 71 05 	sts	0x0571, r27	; 0x800571 <fat_ftell+0x3>
			offset -= fat_ftell;
     fc4:	c8 1a       	sub	r12, r24
     fc6:	d9 0a       	sbc	r13, r25
     fc8:	ea 0a       	sbc	r14, r26
     fca:	fb 0a       	sbc	r15, r27
			clst = _fs.curr_clust;
     fcc:	60 91 66 05 	lds	r22, 0x0566	; 0x800566 <_fs+0x17>
     fd0:	70 91 67 05 	lds	r23, 0x0567	; 0x800567 <_fs+0x18>
     fd4:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <_fs+0x19>
     fd8:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <_fs+0x1a>
		{
			clst = _fs.org_clust;
			_fs.curr_clust = clst;
		}

		while(offset > bcs)
     fdc:	8c 14       	cp	r8, r12
     fde:	9d 04       	cpc	r9, r13
     fe0:	ae 04       	cpc	r10, r14
     fe2:	bf 04       	cpc	r11, r15
     fe4:	08 f4       	brcc	.+2      	; 0xfe8 <fat_fseek+0x13e>
     fe6:	52 c0       	rjmp	.+164    	; 0x108c <fat_fseek+0x1e2>
			_fs.curr_clust = clst;
			fat_ftell += bcs;
			offset -= bcs;
		}

		fat_ftell += offset;
     fe8:	00 91 6e 05 	lds	r16, 0x056E	; 0x80056e <fat_ftell>
     fec:	10 91 6f 05 	lds	r17, 0x056F	; 0x80056f <fat_ftell+0x1>
     ff0:	20 91 70 05 	lds	r18, 0x0570	; 0x800570 <fat_ftell+0x2>
     ff4:	30 91 71 05 	lds	r19, 0x0571	; 0x800571 <fat_ftell+0x3>
     ff8:	c0 0e       	add	r12, r16
     ffa:	d1 1e       	adc	r13, r17
     ffc:	e2 1e       	adc	r14, r18
     ffe:	f3 1e       	adc	r15, r19
    1000:	c0 92 6e 05 	sts	0x056E, r12	; 0x80056e <fat_ftell>
    1004:	d0 92 6f 05 	sts	0x056F, r13	; 0x80056f <fat_ftell+0x1>
    1008:	e0 92 70 05 	sts	0x0570, r14	; 0x800570 <fat_ftell+0x2>
    100c:	f0 92 71 05 	sts	0x0571, r15	; 0x800571 <fat_ftell+0x3>
		if(!(sect = clust2sect(clst)))
    1010:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <clust2sect>
    1014:	46 2f       	mov	r20, r22
    1016:	57 2f       	mov	r21, r23
    1018:	bc 01       	movw	r22, r24
    101a:	41 15       	cp	r20, r1
    101c:	51 05       	cpc	r21, r1
    101e:	61 05       	cpc	r22, r1
    1020:	71 05       	cpc	r23, r1
    1022:	d9 f1       	breq	.+118    	; 0x109a <fat_fseek+0x1f0>
		{
			return 1;
		}

		_fs.dsect = sect + (fat_ftell / 512 & (_fs.csize - 1));
    1024:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <_fs>
    1028:	81 50       	subi	r24, 0x01	; 1
    102a:	99 0b       	sbc	r25, r25
    102c:	09 2e       	mov	r0, r25
    102e:	00 0c       	add	r0, r0
    1030:	aa 0b       	sbc	r26, r26
    1032:	bb 0b       	sbc	r27, r27
    1034:	29 e0       	ldi	r18, 0x09	; 9
    1036:	f6 94       	lsr	r15
    1038:	e7 94       	ror	r14
    103a:	d7 94       	ror	r13
    103c:	c7 94       	ror	r12
    103e:	2a 95       	dec	r18
    1040:	d1 f7       	brne	.-12     	; 0x1036 <fat_fseek+0x18c>
    1042:	8c 21       	and	r24, r12
    1044:	9d 21       	and	r25, r13
    1046:	ae 21       	and	r26, r14
    1048:	bf 21       	and	r27, r15
    104a:	6c 01       	movw	r12, r24
    104c:	7d 01       	movw	r14, r26
    104e:	c4 0e       	add	r12, r20
    1050:	d5 1e       	adc	r13, r21
    1052:	e6 1e       	adc	r14, r22
    1054:	f7 1e       	adc	r15, r23
    1056:	c0 92 6a 05 	sts	0x056A, r12	; 0x80056a <_fs+0x1b>
    105a:	d0 92 6b 05 	sts	0x056B, r13	; 0x80056b <_fs+0x1c>
    105e:	e0 92 6c 05 	sts	0x056C, r14	; 0x80056c <_fs+0x1d>
    1062:	f0 92 6d 05 	sts	0x056D, r15	; 0x80056d <_fs+0x1e>
	}

	return 0;
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	19 c0       	rjmp	.+50     	; 0x109c <fat_fseek+0x1f2>
			clst = _fs.org_clust;
    106a:	60 91 62 05 	lds	r22, 0x0562	; 0x800562 <_fs+0x13>
    106e:	70 91 63 05 	lds	r23, 0x0563	; 0x800563 <_fs+0x14>
    1072:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <_fs+0x15>
    1076:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <_fs+0x16>
			_fs.curr_clust = clst;
    107a:	60 93 66 05 	sts	0x0566, r22	; 0x800566 <_fs+0x17>
    107e:	70 93 67 05 	sts	0x0567, r23	; 0x800567 <_fs+0x18>
    1082:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <_fs+0x19>
    1086:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <_fs+0x1a>
    108a:	a8 cf       	rjmp	.-176    	; 0xfdc <fat_fseek+0x132>
			clst = get_fat(clst);
    108c:	0e 94 0f 03 	call	0x61e	; 0x61e <get_fat>
			if(clst <= 1 || clst >= _fs.n_fatent)
    1090:	62 30       	cpi	r22, 0x02	; 2
    1092:	71 05       	cpc	r23, r1
    1094:	81 05       	cpc	r24, r1
    1096:	91 05       	cpc	r25, r1
    1098:	c0 f4       	brcc	.+48     	; 0x10ca <fat_fseek+0x220>
				return 1;
    109a:	81 e0       	ldi	r24, 0x01	; 1
}
    109c:	28 96       	adiw	r28, 0x08	; 8
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	ff 90       	pop	r15
    10b2:	ef 90       	pop	r14
    10b4:	df 90       	pop	r13
    10b6:	cf 90       	pop	r12
    10b8:	bf 90       	pop	r11
    10ba:	af 90       	pop	r10
    10bc:	9f 90       	pop	r9
    10be:	8f 90       	pop	r8
    10c0:	7f 90       	pop	r7
    10c2:	6f 90       	pop	r6
    10c4:	5f 90       	pop	r5
    10c6:	4f 90       	pop	r4
    10c8:	08 95       	ret
			if(clst <= 1 || clst >= _fs.n_fatent)
    10ca:	00 91 52 05 	lds	r16, 0x0552	; 0x800552 <_fs+0x3>
    10ce:	10 91 53 05 	lds	r17, 0x0553	; 0x800553 <_fs+0x4>
    10d2:	20 91 54 05 	lds	r18, 0x0554	; 0x800554 <_fs+0x5>
    10d6:	30 91 55 05 	lds	r19, 0x0555	; 0x800555 <_fs+0x6>
    10da:	60 17       	cp	r22, r16
    10dc:	71 07       	cpc	r23, r17
    10de:	82 07       	cpc	r24, r18
    10e0:	93 07       	cpc	r25, r19
    10e2:	d8 f6       	brcc	.-74     	; 0x109a <fat_fseek+0x1f0>
			_fs.curr_clust = clst;
    10e4:	60 93 66 05 	sts	0x0566, r22	; 0x800566 <_fs+0x17>
    10e8:	70 93 67 05 	sts	0x0567, r23	; 0x800567 <_fs+0x18>
    10ec:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <_fs+0x19>
    10f0:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <_fs+0x1a>
			fat_ftell += bcs;
    10f4:	00 91 6e 05 	lds	r16, 0x056E	; 0x80056e <fat_ftell>
    10f8:	10 91 6f 05 	lds	r17, 0x056F	; 0x80056f <fat_ftell+0x1>
    10fc:	20 91 70 05 	lds	r18, 0x0570	; 0x800570 <fat_ftell+0x2>
    1100:	30 91 71 05 	lds	r19, 0x0571	; 0x800571 <fat_ftell+0x3>
    1104:	08 0d       	add	r16, r8
    1106:	19 1d       	adc	r17, r9
    1108:	2a 1d       	adc	r18, r10
    110a:	3b 1d       	adc	r19, r11
    110c:	00 93 6e 05 	sts	0x056E, r16	; 0x80056e <fat_ftell>
    1110:	10 93 6f 05 	sts	0x056F, r17	; 0x80056f <fat_ftell+0x1>
    1114:	20 93 70 05 	sts	0x0570, r18	; 0x800570 <fat_ftell+0x2>
    1118:	30 93 71 05 	sts	0x0571, r19	; 0x800571 <fat_ftell+0x3>
			offset -= bcs;
    111c:	c8 18       	sub	r12, r8
    111e:	d9 08       	sbc	r13, r9
    1120:	ea 08       	sbc	r14, r10
    1122:	fb 08       	sbc	r15, r11
    1124:	5b cf       	rjmp	.-330    	; 0xfdc <fat_fseek+0x132>

00001126 <fat_opendir>:

	return res;
}

uint8_t fat_opendir(dir_t *dj, const char *path)
{
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	ac 97       	sbiw	r28, 0x2c	; 44
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	8c 01       	movw	r16, r24
    1140:	ab 01       	movw	r20, r22
	uint8_t res;
	uint8_t sp[12], dir[32];
	dj->fn = sp;
    1142:	ce 01       	movw	r24, r28
    1144:	81 96       	adiw	r24, 0x21	; 33
    1146:	d8 01       	movw	r26, r16
    1148:	13 96       	adiw	r26, 0x03	; 3
    114a:	9c 93       	st	X, r25
    114c:	8e 93       	st	-X, r24
    114e:	12 97       	sbiw	r26, 0x02	; 2
	if(!(res = follow_path(dj, dir, path)))
    1150:	be 01       	movw	r22, r28
    1152:	6f 5f       	subi	r22, 0xFF	; 255
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	c8 01       	movw	r24, r16
    1158:	0e 94 41 04 	call	0x882	; 0x882 <follow_path>
    115c:	81 11       	cpse	r24, r1
    115e:	12 c0       	rjmp	.+36     	; 0x1184 <fat_opendir+0x5e>
	{
		if(dir[0])
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	88 23       	and	r24, r24
    1164:	61 f0       	breq	.+24     	; 0x117e <fat_opendir+0x58>
		{
			if(dir[DIR_ATTR] & AM_DIR)
    1166:	8c 85       	ldd	r24, Y+12	; 0x0c
    1168:	84 ff       	sbrs	r24, 4
    116a:	17 c0       	rjmp	.+46     	; 0x119a <fat_opendir+0x74>
			{
				dj->sclust = get_cluster(dir);
    116c:	ce 01       	movw	r24, r28
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	0e 94 df 02 	call	0x5be	; 0x5be <get_cluster>
    1174:	f8 01       	movw	r30, r16
    1176:	64 83       	std	Z+4, r22	; 0x04
    1178:	75 83       	std	Z+5, r23	; 0x05
    117a:	86 83       	std	Z+6, r24	; 0x06
    117c:	97 83       	std	Z+7, r25	; 0x07
			}
		}

		if(!res)
		{
			res = dir_rewind(dj);
    117e:	c8 01       	movw	r24, r16
    1180:	0e 94 a3 02 	call	0x546	; 0x546 <dir_rewind>
		}
	}

	return res;
}
    1184:	ac 96       	adiw	r28, 0x2c	; 44
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	08 95       	ret
				res = 2;
    119a:	82 e0       	ldi	r24, 0x02	; 2
	return res;
    119c:	f3 cf       	rjmp	.-26     	; 0x1184 <fat_opendir+0x5e>

0000119e <fat_readdir>:

uint8_t fat_readdir(dir_t *dj, direntry_t *fno)
{
    119e:	cf 92       	push	r12
    11a0:	df 92       	push	r13
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	ac 97       	sbiw	r28, 0x2c	; 44
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	7c 01       	movw	r14, r24
    11c0:	6b 01       	movw	r12, r22
	uint8_t res;
	uint8_t sp[12], dir[32];
	dj->fn = sp;
    11c2:	ce 01       	movw	r24, r28
    11c4:	81 96       	adiw	r24, 0x21	; 33
    11c6:	d7 01       	movw	r26, r14
    11c8:	13 96       	adiw	r26, 0x03	; 3
    11ca:	9c 93       	st	X, r25
    11cc:	8e 93       	st	-X, r24
    11ce:	12 97       	sbiw	r26, 0x02	; 2
	res = 2;
    11d0:	82 e0       	ldi	r24, 0x02	; 2
	if(!fno)
    11d2:	67 2b       	or	r22, r23
    11d4:	e9 f5       	brne	.+122    	; 0x1250 <fat_readdir+0xb2>
	{
		res = dir_rewind(dj);
    11d6:	c7 01       	movw	r24, r14
    11d8:	0e 94 a3 02 	call	0x546	; 0x546 <dir_rewind>
			}
		}
	}

	return res;
}
    11dc:	ac 96       	adiw	r28, 0x2c	; 44
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	ff 90       	pop	r15
    11f2:	ef 90       	pop	r14
    11f4:	df 90       	pop	r13
    11f6:	cf 90       	pop	r12
    11f8:	08 95       	ret
		if((res = sd_read(dir, dj->sect, (dj->index % 16) * 32, 32)))
    11fa:	f7 01       	movw	r30, r14
    11fc:	20 81       	ld	r18, Z
    11fe:	31 81       	ldd	r19, Z+1	; 0x01
    1200:	2f 70       	andi	r18, 0x0F	; 15
    1202:	33 27       	eor	r19, r19
    1204:	85 e0       	ldi	r24, 0x05	; 5
    1206:	22 0f       	add	r18, r18
    1208:	33 1f       	adc	r19, r19
    120a:	8a 95       	dec	r24
    120c:	e1 f7       	brne	.-8      	; 0x1206 <fat_readdir+0x68>
    120e:	00 e2       	ldi	r16, 0x20	; 32
    1210:	10 e0       	ldi	r17, 0x00	; 0
    1212:	ce 01       	movw	r24, r28
    1214:	01 96       	adiw	r24, 0x01	; 1
    1216:	0e 94 dd 01 	call	0x3ba	; 0x3ba <sd_read>
    121a:	81 11       	cpse	r24, r1
    121c:	0f c0       	rjmp	.+30     	; 0x123c <fat_readdir+0x9e>
		c = dir[DIR_NAME];
    121e:	89 81       	ldd	r24, Y+1	; 0x01
		if(!c)
    1220:	88 23       	and	r24, r24
    1222:	d1 f1       	breq	.+116    	; 0x1298 <fat_readdir+0xfa>
		if(c != 0xE5 && c != '.' && !(a & AM_VOL))
    1224:	85 3e       	cpi	r24, 0xE5	; 229
    1226:	29 f0       	breq	.+10     	; 0x1232 <fat_readdir+0x94>
    1228:	8e 32       	cpi	r24, 0x2E	; 46
    122a:	19 f0       	breq	.+6      	; 0x1232 <fat_readdir+0x94>
    122c:	8c 85       	ldd	r24, Y+12	; 0x0c
    122e:	83 ff       	sbrs	r24, 3
    1230:	1d c0       	rjmp	.+58     	; 0x126c <fat_readdir+0xce>
		if((res = dir_next(dj)))
    1232:	c7 01       	movw	r24, r14
    1234:	0e 94 72 03 	call	0x6e4	; 0x6e4 <dir_next>
    1238:	88 23       	and	r24, r24
    123a:	51 f0       	breq	.+20     	; 0x1250 <fat_readdir+0xb2>
		dj->sect = 0;
    123c:	d7 01       	movw	r26, r14
    123e:	1c 96       	adiw	r26, 0x0c	; 12
    1240:	1d 92       	st	X+, r1
    1242:	1d 92       	st	X+, r1
    1244:	1d 92       	st	X+, r1
    1246:	1c 92       	st	X, r1
    1248:	1f 97       	sbiw	r26, 0x0f	; 15
		if((res = dir_read(dj, dir)) == 2)
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	39 f6       	brne	.-114    	; 0x11dc <fat_readdir+0x3e>
    124e:	0e c0       	rjmp	.+28     	; 0x126c <fat_readdir+0xce>
	while(dj->sect)
    1250:	d7 01       	movw	r26, r14
    1252:	1c 96       	adiw	r26, 0x0c	; 12
    1254:	4d 91       	ld	r20, X+
    1256:	5d 91       	ld	r21, X+
    1258:	6d 91       	ld	r22, X+
    125a:	7c 91       	ld	r23, X
    125c:	1f 97       	sbiw	r26, 0x0f	; 15
    125e:	41 15       	cp	r20, r1
    1260:	51 05       	cpc	r21, r1
    1262:	61 05       	cpc	r22, r1
    1264:	71 05       	cpc	r23, r1
    1266:	49 f6       	brne	.-110    	; 0x11fa <fat_readdir+0x5c>
	if(res)
    1268:	81 11       	cpse	r24, r1
    126a:	e8 cf       	rjmp	.-48     	; 0x123c <fat_readdir+0x9e>
	p = fno->name;
    126c:	86 01       	movw	r16, r12
    126e:	0b 5f       	subi	r16, 0xFB	; 251
    1270:	1f 4f       	sbci	r17, 0xFF	; 255
	if(dj->sect)
    1272:	f7 01       	movw	r30, r14
    1274:	84 85       	ldd	r24, Z+12	; 0x0c
    1276:	95 85       	ldd	r25, Z+13	; 0x0d
    1278:	a6 85       	ldd	r26, Z+14	; 0x0e
    127a:	b7 85       	ldd	r27, Z+15	; 0x0f
    127c:	89 2b       	or	r24, r25
    127e:	8a 2b       	or	r24, r26
    1280:	8b 2b       	or	r24, r27
    1282:	61 f4       	brne	.+24     	; 0x129c <fat_readdir+0xfe>
	*p = 0;
    1284:	d8 01       	movw	r26, r16
    1286:	1c 92       	st	X, r1
			if((res = dir_next(dj)) == 2)
    1288:	c7 01       	movw	r24, r14
    128a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <dir_next>
    128e:	82 30       	cpi	r24, 0x02	; 2
    1290:	09 f0       	breq	.+2      	; 0x1294 <fat_readdir+0xf6>
    1292:	a4 cf       	rjmp	.-184    	; 0x11dc <fat_readdir+0x3e>
				res = 0;
    1294:	80 e0       	ldi	r24, 0x00	; 0
	return res;
    1296:	a2 cf       	rjmp	.-188    	; 0x11dc <fat_readdir+0x3e>
			res = 2;
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	d0 cf       	rjmp	.-96     	; 0x123c <fat_readdir+0x9e>
    129c:	de 01       	movw	r26, r28
    129e:	11 96       	adiw	r26, 0x01	; 1
    12a0:	96 01       	movw	r18, r12
    12a2:	23 5f       	subi	r18, 0xF3	; 243
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
			c = dir[i];
    12a6:	8d 91       	ld	r24, X+
			if(c == ' ')
    12a8:	80 32       	cpi	r24, 0x20	; 32
    12aa:	49 f0       	breq	.+18     	; 0x12be <fat_readdir+0x120>
			if(c == 0x05)
    12ac:	85 30       	cpi	r24, 0x05	; 5
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <fat_readdir+0x114>
				c = 0xE5;
    12b0:	85 ee       	ldi	r24, 0xE5	; 229
			*p++ = c;
    12b2:	f8 01       	movw	r30, r16
    12b4:	81 93       	st	Z+, r24
		for(i = 0; i < 8; i++)
    12b6:	e2 17       	cp	r30, r18
    12b8:	f3 07       	cpc	r31, r19
    12ba:	e1 f4       	brne	.+56     	; 0x12f4 <fat_readdir+0x156>
    12bc:	89 01       	movw	r16, r18
		if(dir[8] != ' ')
    12be:	89 85       	ldd	r24, Y+9	; 0x09
    12c0:	80 32       	cpi	r24, 0x20	; 32
    12c2:	49 f0       	breq	.+18     	; 0x12d6 <fat_readdir+0x138>
			*p++ = '.';
    12c4:	9e e2       	ldi	r25, 0x2E	; 46
    12c6:	f8 01       	movw	r30, r16
    12c8:	90 83       	st	Z, r25
				*p++ = c;
    12ca:	81 83       	std	Z+1, r24	; 0x01
				c = dir[i];
    12cc:	8a 85       	ldd	r24, Y+10	; 0x0a
				if (c == ' ')
    12ce:	80 32       	cpi	r24, 0x20	; 32
    12d0:	99 f4       	brne	.+38     	; 0x12f8 <fat_readdir+0x15a>
				*p++ = c;
    12d2:	0e 5f       	subi	r16, 0xFE	; 254
    12d4:	1f 4f       	sbci	r17, 0xFF	; 255
		fno->type = dir[DIR_ATTR] & AM_DIR;
    12d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    12d8:	80 71       	andi	r24, 0x10	; 16
    12da:	d6 01       	movw	r26, r12
    12dc:	14 96       	adiw	r26, 0x04	; 4
    12de:	8c 93       	st	X, r24
		fno->size = ld_u32(dir + DIR_FILESIZE);
    12e0:	ce 01       	movw	r24, r28
    12e2:	4d 96       	adiw	r24, 0x1d	; 29
    12e4:	0e 94 87 09 	call	0x130e	; 0x130e <ld_u32>
    12e8:	f6 01       	movw	r30, r12
    12ea:	60 83       	st	Z, r22
    12ec:	71 83       	std	Z+1, r23	; 0x01
    12ee:	82 83       	std	Z+2, r24	; 0x02
    12f0:	93 83       	std	Z+3, r25	; 0x03
    12f2:	c8 cf       	rjmp	.-112    	; 0x1284 <fat_readdir+0xe6>
    12f4:	8f 01       	movw	r16, r30
    12f6:	d7 cf       	rjmp	.-82     	; 0x12a6 <fat_readdir+0x108>
				*p++ = c;
    12f8:	82 83       	std	Z+2, r24	; 0x02
				c = dir[i];
    12fa:	8b 85       	ldd	r24, Y+11	; 0x0b
				if (c == ' ')
    12fc:	80 32       	cpi	r24, 0x20	; 32
    12fe:	19 f4       	brne	.+6      	; 0x1306 <fat_readdir+0x168>
				*p++ = c;
    1300:	0d 5f       	subi	r16, 0xFD	; 253
    1302:	1f 4f       	sbci	r17, 0xFF	; 255
    1304:	e8 cf       	rjmp	.-48     	; 0x12d6 <fat_readdir+0x138>
    1306:	83 83       	std	Z+3, r24	; 0x03
    1308:	0c 5f       	subi	r16, 0xFC	; 252
    130a:	1f 4f       	sbci	r17, 0xFF	; 255
    130c:	e4 cf       	rjmp	.-56     	; 0x12d6 <fat_readdir+0x138>

0000130e <ld_u32>:
#include "util.h"

uint32_t ld_u32(const uint8_t *p)
{
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	00 d0       	rcall	.+0      	; 0x1314 <ld_u32+0x6>
    1314:	00 d0       	rcall	.+0      	; 0x1316 <ld_u32+0x8>
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
	return ((uint32_t)p[0]) | (((uint32_t)p[1]) << 8) |
		(((uint32_t)p[2]) << 16) | (((uint32_t)p[3]) << 24);
    131a:	fc 01       	movw	r30, r24
    131c:	20 81       	ld	r18, Z
    131e:	31 81       	ldd	r19, Z+1	; 0x01
    1320:	42 81       	ldd	r20, Z+2	; 0x02
    1322:	53 81       	ldd	r21, Z+3	; 0x03
}
    1324:	ca 01       	movw	r24, r20
    1326:	b9 01       	movw	r22, r18
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	08 95       	ret

00001336 <ld_u16>:

uint16_t ld_u16(const uint8_t *p)
{
	return ((uint16_t)p[0]) | ((uint16_t)(p[1]) << 8);
}
    1336:	fc 01       	movw	r30, r24
    1338:	80 81       	ld	r24, Z
    133a:	91 81       	ldd	r25, Z+1	; 0x01
    133c:	08 95       	ret

0000133e <mem_set>:

void mem_set(uint8_t *dst, uint8_t val, uint16_t cnt)
{
    133e:	9c 01       	movw	r18, r24
	while(cnt--)
    1340:	48 0f       	add	r20, r24
    1342:	59 1f       	adc	r21, r25
    1344:	24 17       	cp	r18, r20
    1346:	35 07       	cpc	r19, r21
    1348:	09 f4       	brne	.+2      	; 0x134c <mem_set+0xe>
	{
		*dst++ = val;
	}
}
    134a:	08 95       	ret
		*dst++ = val;
    134c:	f9 01       	movw	r30, r18
    134e:	61 93       	st	Z+, r22
    1350:	9f 01       	movw	r18, r30
    1352:	f8 cf       	rjmp	.-16     	; 0x1344 <mem_set+0x6>

00001354 <mem_cmp>:

uint8_t mem_cmp(const uint8_t *dst, const uint8_t *src, uint16_t cnt)
{
    1354:	9c 01       	movw	r18, r24
	uint8_t r = 0;
	while(cnt-- && (r = *dst++ == *src++)) ;
    1356:	48 0f       	add	r20, r24
    1358:	59 1f       	adc	r21, r25
	uint8_t r = 0;
    135a:	80 e0       	ldi	r24, 0x00	; 0
	while(cnt-- && (r = *dst++ == *src++)) ;
    135c:	24 17       	cp	r18, r20
    135e:	35 07       	cpc	r19, r21
    1360:	49 f0       	breq	.+18     	; 0x1374 <mem_cmp+0x20>
    1362:	fb 01       	movw	r30, r22
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	d9 01       	movw	r26, r18
    1368:	6d 91       	ld	r22, X+
    136a:	9d 01       	movw	r18, r26
    136c:	91 91       	ld	r25, Z+
    136e:	69 17       	cp	r22, r25
    1370:	11 f0       	breq	.+4      	; 0x1376 <mem_cmp+0x22>
    1372:	80 e0       	ldi	r24, 0x00	; 0
	return r;
}
    1374:	08 95       	ret
	while(cnt-- && (r = *dst++ == *src++)) ;
    1376:	bf 01       	movw	r22, r30
    1378:	f1 cf       	rjmp	.-30     	; 0x135c <mem_cmp+0x8>

0000137a <mem_mem>:

const uint8_t *mem_mem(
	const uint8_t *haystack, uint16_t haystack_len,
	const uint8_t *needle, uint16_t needle_len)
{
    137a:	8f 92       	push	r8
    137c:	9f 92       	push	r9
    137e:	af 92       	push	r10
    1380:	bf 92       	push	r11
    1382:	cf 92       	push	r12
    1384:	df 92       	push	r13
    1386:	ef 92       	push	r14
    1388:	ff 92       	push	r15
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	6c 01       	movw	r12, r24
    1394:	8b 01       	movw	r16, r22
    1396:	94 2e       	mov	r9, r20
    1398:	85 2e       	mov	r8, r21
    139a:	79 01       	movw	r14, r18
	uint16_t i;

	if(needle_len == 0)
	{
		return haystack;
    139c:	ec 01       	movw	r28, r24
	if(needle_len == 0)
    139e:	21 15       	cp	r18, r1
    13a0:	31 05       	cpc	r19, r1
    13a2:	d1 f0       	breq	.+52     	; 0x13d8 <mem_mem+0x5e>
	}

	if(haystack_len < needle_len)
    13a4:	62 17       	cp	r22, r18
    13a6:	73 07       	cpc	r23, r19
    13a8:	a8 f0       	brcs	.+42     	; 0x13d4 <mem_mem+0x5a>
	{
		return 0;
	}

	for(i = 0; i <= haystack_len - needle_len; ++i)
    13aa:	b1 2c       	mov	r11, r1
    13ac:	a1 2c       	mov	r10, r1
    13ae:	02 1b       	sub	r16, r18
    13b0:	13 0b       	sbc	r17, r19
	{
		if(mem_cmp(haystack + i, needle, needle_len))
    13b2:	e6 01       	movw	r28, r12
    13b4:	ca 0d       	add	r28, r10
    13b6:	db 1d       	adc	r29, r11
    13b8:	a7 01       	movw	r20, r14
    13ba:	69 2d       	mov	r22, r9
    13bc:	78 2d       	mov	r23, r8
    13be:	ce 01       	movw	r24, r28
    13c0:	0e 94 aa 09 	call	0x1354	; 0x1354 <mem_cmp>
    13c4:	81 11       	cpse	r24, r1
    13c6:	08 c0       	rjmp	.+16     	; 0x13d8 <mem_mem+0x5e>
	for(i = 0; i <= haystack_len - needle_len; ++i)
    13c8:	8f ef       	ldi	r24, 0xFF	; 255
    13ca:	a8 1a       	sub	r10, r24
    13cc:	b8 0a       	sbc	r11, r24
    13ce:	0a 15       	cp	r16, r10
    13d0:	1b 05       	cpc	r17, r11
    13d2:	78 f7       	brcc	.-34     	; 0x13b2 <mem_mem+0x38>
		return 0;
    13d4:	d0 e0       	ldi	r29, 0x00	; 0
    13d6:	c0 e0       	ldi	r28, 0x00	; 0
			return haystack + i;
		}
	}

	return 0;
}
    13d8:	ce 01       	movw	r24, r28
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	1f 91       	pop	r17
    13e0:	0f 91       	pop	r16
    13e2:	ff 90       	pop	r15
    13e4:	ef 90       	pop	r14
    13e6:	df 90       	pop	r13
    13e8:	cf 90       	pop	r12
    13ea:	bf 90       	pop	r11
    13ec:	af 90       	pop	r10
    13ee:	9f 90       	pop	r9
    13f0:	8f 90       	pop	r8
    13f2:	08 95       	ret

000013f4 <main>:
{
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	ae 97       	sbiw	r28, 0x2e	; 46
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
	uint16_t n = 0;
    1404:	1a a6       	std	Y+42, r1	; 0x2a
    1406:	19 a6       	std	Y+41, r1	; 0x29
	IO_INIT();
    1408:	84 e0       	ldi	r24, 0x04	; 4
    140a:	8a b9       	out	0x0a, r24	; 10
    140c:	8f e0       	ldi	r24, 0x0F	; 15
    140e:	88 b9       	out	0x08, r24	; 8
	TIMER_INIT();
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1416:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    141a:	83 ea       	ldi	r24, 0xA3	; 163
    141c:	84 bd       	out	0x24, r24	; 36
    141e:	17 bc       	out	0x27, r1	; 39
    1420:	18 bc       	out	0x28, r1	; 40
	TIMER_STOP();
    1422:	8a b1       	in	r24, 0x0a	; 10
    1424:	8f 79       	andi	r24, 0x9F	; 159
    1426:	8a b9       	out	0x0a, r24	; 10
    1428:	15 bc       	out	0x25, r1	; 37
    142a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	if(sd_init())
    142e:	0e 94 12 01 	call	0x224	; 0x224 <sd_init>
    1432:	81 11       	cpse	r24, r1
		error();
    1434:	0e 94 53 00 	call	0xa6	; 0xa6 <error>
	if(fat_mount())
    1438:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <fat_mount>
    143c:	81 11       	cpse	r24, r1
    143e:	fa cf       	rjmp	.-12     	; 0x1434 <main+0x40>
	if(fat_opendir(&d, "/"))
    1440:	68 e2       	ldi	r22, 0x28	; 40
    1442:	71 e0       	ldi	r23, 0x01	; 1
    1444:	ce 01       	movw	r24, r28
    1446:	43 96       	adiw	r24, 0x13	; 19
    1448:	0e 94 93 08 	call	0x1126	; 0x1126 <fat_opendir>
    144c:	18 2f       	mov	r17, r24
							btns[i] = BTN_DEBOUNCE_TICKS + 1;
    144e:	09 ec       	ldi	r16, 0xC9	; 201
	if(fat_opendir(&d, "/"))
    1450:	81 11       	cpse	r24, r1
    1452:	f0 cf       	rjmp	.-32     	; 0x1434 <main+0x40>
		while(!(res = fat_readdir(&d, &di)))
    1454:	be 01       	movw	r22, r28
    1456:	6f 5f       	subi	r22, 0xFF	; 255
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	ce 01       	movw	r24, r28
    145c:	43 96       	adiw	r24, 0x13	; 19
    145e:	0e 94 cf 08 	call	0x119e	; 0x119e <fat_readdir>
    1462:	88 23       	and	r24, r24
    1464:	39 f0       	breq	.+14     	; 0x1474 <main+0x80>
		fat_readdir(&d, 0);
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	ce 01       	movw	r24, r28
    146c:	43 96       	adiw	r24, 0x13	; 19
    146e:	0e 94 cf 08 	call	0x119e	; 0x119e <fat_readdir>
		while(!(res = fat_readdir(&d, &di)))
    1472:	f0 cf       	rjmp	.-32     	; 0x1454 <main+0x60>
			if(di.type)
    1474:	8d 81       	ldd	r24, Y+5	; 0x05
    1476:	81 11       	cpse	r24, r1
    1478:	ed cf       	rjmp	.-38     	; 0x1454 <main+0x60>
			if(fat_fopen(di.name))
    147a:	ce 01       	movw	r24, r28
    147c:	06 96       	adiw	r24, 0x06	; 6
    147e:	0e 94 05 06 	call	0xc0a	; 0xc0a <fat_fopen>
    1482:	81 11       	cpse	r24, r1
    1484:	e7 cf       	rjmp	.-50     	; 0x1454 <main+0x60>
	if(fat_fread(buf0, 512, &n) || n != 512)
    1486:	ae 01       	movw	r20, r28
    1488:	49 5d       	subi	r20, 0xD9	; 217
    148a:	5f 4f       	sbci	r21, 0xFF	; 255
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	72 e0       	ldi	r23, 0x02	; 2
    1490:	86 e4       	ldi	r24, 0x46	; 70
    1492:	93 e0       	ldi	r25, 0x03	; 3
    1494:	0e 94 4f 06 	call	0xc9e	; 0xc9e <fat_fread>
    1498:	81 11       	cpse	r24, r1
    149a:	dc cf       	rjmp	.-72     	; 0x1454 <main+0x60>
    149c:	8f a1       	ldd	r24, Y+39	; 0x27
    149e:	98 a5       	ldd	r25, Y+40	; 0x28
    14a0:	81 15       	cp	r24, r1
    14a2:	92 40       	sbci	r25, 0x02	; 2
    14a4:	b9 f6       	brne	.-82     	; 0x1454 <main+0x60>
	if(!mem_cmp(buf0, (uint8_t *)"RIFF", 4))
    14a6:	44 e0       	ldi	r20, 0x04	; 4
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	6a e2       	ldi	r22, 0x2A	; 42
    14ac:	71 e0       	ldi	r23, 0x01	; 1
    14ae:	86 e4       	ldi	r24, 0x46	; 70
    14b0:	93 e0       	ldi	r25, 0x03	; 3
    14b2:	0e 94 aa 09 	call	0x1354	; 0x1354 <mem_cmp>
    14b6:	88 23       	and	r24, r24
    14b8:	69 f2       	breq	.-102    	; 0x1454 <main+0x60>
	if(!mem_cmp(buf0 + 8, (uint8_t *)"WAVEfmt ", 8))
    14ba:	48 e0       	ldi	r20, 0x08	; 8
    14bc:	50 e0       	ldi	r21, 0x00	; 0
    14be:	6f e2       	ldi	r22, 0x2F	; 47
    14c0:	71 e0       	ldi	r23, 0x01	; 1
    14c2:	8e e4       	ldi	r24, 0x4E	; 78
    14c4:	93 e0       	ldi	r25, 0x03	; 3
    14c6:	0e 94 aa 09 	call	0x1354	; 0x1354 <mem_cmp>
    14ca:	88 23       	and	r24, r24
    14cc:	19 f2       	breq	.-122    	; 0x1454 <main+0x60>
	if(ld_u32(buf0 + 16) != 16)
    14ce:	86 e5       	ldi	r24, 0x56	; 86
    14d0:	93 e0       	ldi	r25, 0x03	; 3
    14d2:	0e 94 87 09 	call	0x130e	; 0x130e <ld_u32>
    14d6:	6b a7       	std	Y+43, r22	; 0x2b
    14d8:	7c a7       	std	Y+44, r23	; 0x2c
    14da:	8d a7       	std	Y+45, r24	; 0x2d
    14dc:	9e a7       	std	Y+46, r25	; 0x2e
    14de:	60 31       	cpi	r22, 0x10	; 16
    14e0:	71 05       	cpc	r23, r1
    14e2:	81 05       	cpc	r24, r1
    14e4:	91 05       	cpc	r25, r1
    14e6:	09 f0       	breq	.+2      	; 0x14ea <main+0xf6>
    14e8:	b5 cf       	rjmp	.-150    	; 0x1454 <main+0x60>
	if(ld_u16(buf0 + 20) != 1)
    14ea:	8a e5       	ldi	r24, 0x5A	; 90
    14ec:	93 e0       	ldi	r25, 0x03	; 3
    14ee:	0e 94 9b 09 	call	0x1336	; 0x1336 <ld_u16>
    14f2:	01 97       	sbiw	r24, 0x01	; 1
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <main+0x104>
    14f6:	ae cf       	rjmp	.-164    	; 0x1454 <main+0x60>
	wi.num_channels = ld_u16(buf0 + 22);
    14f8:	8c e5       	ldi	r24, 0x5C	; 92
    14fa:	93 e0       	ldi	r25, 0x03	; 3
    14fc:	0e 94 9b 09 	call	0x1336	; 0x1336 <ld_u16>
    1500:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <wi>
	if(wi.num_channels != 1 && wi.num_channels != 2)
    1504:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <wi>
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	29 f0       	breq	.+10     	; 0x1516 <main+0x122>
    150c:	80 91 46 05 	lds	r24, 0x0546	; 0x800546 <wi>
    1510:	82 30       	cpi	r24, 0x02	; 2
    1512:	09 f0       	breq	.+2      	; 0x1516 <main+0x122>
    1514:	9f cf       	rjmp	.-194    	; 0x1454 <main+0x60>
	sample_rate = ld_u32(buf0 + 24);
    1516:	8e e5       	ldi	r24, 0x5E	; 94
    1518:	93 e0       	ldi	r25, 0x03	; 3
    151a:	0e 94 87 09 	call	0x130e	; 0x130e <ld_u32>
    151e:	46 2f       	mov	r20, r22
    1520:	57 2f       	mov	r21, r23
    1522:	bc 01       	movw	r22, r24
	for(i = 0; i < ARRAY_LENGTH(sample_rates); ++i)
    1524:	e0 e0       	ldi	r30, 0x00	; 0
    1526:	f1 e0       	ldi	r31, 0x01	; 1
	sample_rate = ld_u32(buf0 + 24);
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	80 e0       	ldi	r24, 0x00	; 0
		if(sample_rate == sample_rates[i].sample_rate)
    152c:	c0 80       	ld	r12, Z
    152e:	d1 80       	ldd	r13, Z+1	; 0x01
    1530:	e2 80       	ldd	r14, Z+2	; 0x02
    1532:	f3 80       	ldd	r15, Z+3	; 0x03
    1534:	4c 15       	cp	r20, r12
    1536:	5d 05       	cpc	r21, r13
    1538:	6e 05       	cpc	r22, r14
    153a:	7f 05       	cpc	r23, r15
    153c:	09 f0       	breq	.+2      	; 0x1540 <main+0x14c>
    153e:	6e c0       	rjmp	.+220    	; 0x161c <main+0x228>
			wi.compare_value = sample_rates[i].compare_value;
    1540:	25 e0       	ldi	r18, 0x05	; 5
    1542:	28 9f       	mul	r18, r24
    1544:	f0 01       	movw	r30, r0
    1546:	29 9f       	mul	r18, r25
    1548:	f0 0d       	add	r31, r0
    154a:	11 24       	eor	r1, r1
    154c:	e0 50       	subi	r30, 0x00	; 0
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	84 81       	ldd	r24, Z+4	; 0x04
    1552:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <wi+0x1>
	if(!(data_ptr = mem_mem(buf0 + 36, 512 - 36, (uint8_t *)"data", 4)))
    1556:	24 e0       	ldi	r18, 0x04	; 4
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	48 e3       	ldi	r20, 0x38	; 56
    155c:	51 e0       	ldi	r21, 0x01	; 1
    155e:	6c ed       	ldi	r22, 0xDC	; 220
    1560:	71 e0       	ldi	r23, 0x01	; 1
    1562:	8a e6       	ldi	r24, 0x6A	; 106
    1564:	93 e0       	ldi	r25, 0x03	; 3
    1566:	0e 94 bd 09 	call	0x137a	; 0x137a <mem_mem>
    156a:	9c 01       	movw	r18, r24
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	09 f4       	brne	.+2      	; 0x1572 <main+0x17e>
    1570:	71 cf       	rjmp	.-286    	; 0x1454 <main+0x60>
	wi.offset = data_ptr - buf0 + 8;
    1572:	8e 53       	subi	r24, 0x3E	; 62
    1574:	93 40       	sbci	r25, 0x03	; 3
    1576:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <wi+0x3>
    157a:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <wi+0x2>
	wi.data_len = ld_u32(data_ptr + 4);
    157e:	c9 01       	movw	r24, r18
    1580:	04 96       	adiw	r24, 0x04	; 4
    1582:	0e 94 87 09 	call	0x130e	; 0x130e <ld_u32>
    1586:	46 2f       	mov	r20, r22
    1588:	57 2f       	mov	r21, r23
    158a:	bc 01       	movw	r22, r24
    158c:	40 93 4a 05 	sts	0x054A, r20	; 0x80054a <wi+0x4>
    1590:	50 93 4b 05 	sts	0x054B, r21	; 0x80054b <wi+0x5>
    1594:	60 93 4c 05 	sts	0x054C, r22	; 0x80054c <wi+0x6>
    1598:	70 93 4d 05 	sts	0x054D, r23	; 0x80054d <wi+0x7>
			max[0] = 512;
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	92 e0       	ldi	r25, 0x02	; 2
    15a0:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <max+0x1>
    15a4:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <max>
			max[1] = 512;
    15a8:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <max+0x3>
    15ac:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <max+0x2>
			fat_fseek(0);
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	70 e0       	ldi	r23, 0x00	; 0
    15b4:	cb 01       	movw	r24, r22
    15b6:	0e 94 55 07 	call	0xeaa	; 0xeaa <fat_fseek>
			ibuf = wi.offset;
    15ba:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <wi+0x2>
    15be:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <wi+0x3>
    15c2:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <__data_end+0x1>
    15c6:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
			OCR2A = wi.compare_value;
    15ca:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <wi+0x1>
    15ce:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
			TIMER_START();
    15d2:	8a b1       	in	r24, 0x0a	; 10
    15d4:	80 66       	ori	r24, 0x60	; 96
    15d6:	8a b9       	out	0x0a, r24	; 10
    15d8:	82 e0       	ldi	r24, 0x02	; 2
    15da:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	85 bd       	out	0x25, r24	; 37
			sei();
    15e2:	78 94       	sei
			nread = 0;
    15e4:	c1 2c       	mov	r12, r1
    15e6:	d1 2c       	mov	r13, r1
    15e8:	76 01       	movw	r14, r12
								stopped = !stopped;
    15ea:	bb 24       	eor	r11, r11
    15ec:	b3 94       	inc	r11
									TIMER_START();
    15ee:	52 e0       	ldi	r21, 0x02	; 2
    15f0:	a5 2e       	mov	r10, r21
			while(nread < wi.data_len)
    15f2:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <wi+0x4>
    15f6:	90 91 4b 05 	lds	r25, 0x054B	; 0x80054b <wi+0x5>
    15fa:	a0 91 4c 05 	lds	r26, 0x054C	; 0x80054c <wi+0x6>
    15fe:	b0 91 4d 05 	lds	r27, 0x054D	; 0x80054d <wi+0x7>
    1602:	c8 16       	cp	r12, r24
    1604:	d9 06       	cpc	r13, r25
    1606:	ea 06       	cpc	r14, r26
    1608:	fb 06       	cpc	r15, r27
    160a:	78 f0       	brcs	.+30     	; 0x162a <main+0x236>
			TIMER_STOP();
    160c:	8a b1       	in	r24, 0x0a	; 10
    160e:	8f 79       	andi	r24, 0x9F	; 159
    1610:	8a b9       	out	0x0a, r24	; 10
    1612:	15 bc       	out	0x25, r1	; 37
    1614:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
			cli();
    1618:	f8 94       	cli
    161a:	1c cf       	rjmp	.-456    	; 0x1454 <main+0x60>
	for(i = 0; i < ARRAY_LENGTH(sample_rates); ++i)
    161c:	01 96       	adiw	r24, 0x01	; 1
    161e:	35 96       	adiw	r30, 0x05	; 5
    1620:	88 30       	cpi	r24, 0x08	; 8
    1622:	91 05       	cpc	r25, r1
    1624:	09 f0       	breq	.+2      	; 0x1628 <main+0x234>
    1626:	82 cf       	rjmp	.-252    	; 0x152c <main+0x138>
    1628:	15 cf       	rjmp	.-470    	; 0x1454 <main+0x60>
				if(flag)
    162a:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <flag>
    162e:	88 23       	and	r24, r24
    1630:	51 f1       	breq	.+84     	; 0x1686 <main+0x292>
					if(fat_fread(cbuf ? buf0 : buf1, 512, &n))
    1632:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <cbuf>
    1636:	81 11       	cpse	r24, r1
    1638:	43 c0       	rjmp	.+134    	; 0x16c0 <main+0x2cc>
    163a:	86 e4       	ldi	r24, 0x46	; 70
    163c:	91 e0       	ldi	r25, 0x01	; 1
    163e:	ae 01       	movw	r20, r28
    1640:	47 5d       	subi	r20, 0xD7	; 215
    1642:	5f 4f       	sbci	r21, 0xFF	; 255
    1644:	60 e0       	ldi	r22, 0x00	; 0
    1646:	72 e0       	ldi	r23, 0x02	; 2
    1648:	0e 94 4f 06 	call	0xc9e	; 0xc9e <fat_fread>
    164c:	81 11       	cpse	r24, r1
    164e:	f2 ce       	rjmp	.-540    	; 0x1434 <main+0x40>
					if(n < 512)
    1650:	29 a5       	ldd	r18, Y+41	; 0x29
    1652:	3a a5       	ldd	r19, Y+42	; 0x2a
    1654:	21 15       	cp	r18, r1
    1656:	82 e0       	ldi	r24, 0x02	; 2
    1658:	38 07       	cpc	r19, r24
    165a:	78 f4       	brcc	.+30     	; 0x167a <main+0x286>
						max[!cbuf] = n;
    165c:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <cbuf>
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	44 23       	and	r20, r20
    1666:	11 f0       	breq	.+4      	; 0x166c <main+0x278>
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	fc 01       	movw	r30, r24
    1672:	ee 5b       	subi	r30, 0xBE	; 190
    1674:	fe 4f       	sbci	r31, 0xFE	; 254
    1676:	31 83       	std	Z+1, r19	; 0x01
    1678:	20 83       	st	Z, r18
					nread += n;
    167a:	c2 0e       	add	r12, r18
    167c:	d3 1e       	adc	r13, r19
    167e:	e1 1c       	adc	r14, r1
    1680:	f1 1c       	adc	r15, r1
					flag = 0;
    1682:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <flag>
					if(fat_fread(cbuf ? buf0 : buf1, 512, &n))
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	20 e0       	ldi	r18, 0x00	; 0
					if(!(PINC & (1 << i)))
    168a:	86 b1       	in	r24, 0x06	; 6
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <main+0x2a2>
    1692:	95 95       	asr	r25
    1694:	87 95       	ror	r24
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <main+0x29e>
    169a:	e3 e2       	ldi	r30, 0x23	; 35
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	ec 0f       	add	r30, r28
    16a0:	fd 1f       	adc	r31, r29
    16a2:	e2 0f       	add	r30, r18
    16a4:	f3 1f       	adc	r31, r19
    16a6:	80 fd       	sbrc	r24, 0
    16a8:	26 c0       	rjmp	.+76     	; 0x16f6 <main+0x302>
						if(btns[i] < BTN_DEBOUNCE_TICKS)
    16aa:	80 81       	ld	r24, Z
    16ac:	88 3c       	cpi	r24, 0xC8	; 200
    16ae:	58 f4       	brcc	.+22     	; 0x16c6 <main+0x2d2>
							++btns[i];
    16b0:	8f 5f       	subi	r24, 0xFF	; 255
    16b2:	80 83       	st	Z, r24
				for(i = 0; i < 4; ++i)
    16b4:	2f 5f       	subi	r18, 0xFF	; 255
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
    16b8:	24 30       	cpi	r18, 0x04	; 4
    16ba:	31 05       	cpc	r19, r1
    16bc:	31 f7       	brne	.-52     	; 0x168a <main+0x296>
    16be:	99 cf       	rjmp	.-206    	; 0x15f2 <main+0x1fe>
					if(fat_fread(cbuf ? buf0 : buf1, 512, &n))
    16c0:	86 e4       	ldi	r24, 0x46	; 70
    16c2:	93 e0       	ldi	r25, 0x03	; 3
    16c4:	bc cf       	rjmp	.-136    	; 0x163e <main+0x24a>
						else if(btns[i] == BTN_DEBOUNCE_TICKS)
    16c6:	88 3c       	cpi	r24, 0xC8	; 200
    16c8:	a9 f7       	brne	.-22     	; 0x16b4 <main+0x2c0>
							btns[i] = BTN_DEBOUNCE_TICKS + 1;
    16ca:	00 83       	st	Z, r16
							switch(i)
    16cc:	21 11       	cpse	r18, r1
    16ce:	f2 cf       	rjmp	.-28     	; 0x16b4 <main+0x2c0>
									TIMER_START();
    16d0:	8a b1       	in	r24, 0x0a	; 10
								if(stopped)
    16d2:	11 23       	and	r17, r17
    16d4:	51 f0       	breq	.+20     	; 0x16ea <main+0x2f6>
									TIMER_START();
    16d6:	80 66       	ori	r24, 0x60	; 96
    16d8:	8a b9       	out	0x0a, r24	; 10
    16da:	a0 92 b1 00 	sts	0x00B1, r10	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    16de:	b5 bc       	out	0x25, r11	; 37
								stopped = !stopped;
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	11 11       	cpse	r17, r1
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	18 2f       	mov	r17, r24
								break;
    16e8:	e5 cf       	rjmp	.-54     	; 0x16b4 <main+0x2c0>
									TIMER_STOP();
    16ea:	8f 79       	andi	r24, 0x9F	; 159
    16ec:	8a b9       	out	0x0a, r24	; 10
    16ee:	15 bc       	out	0x25, r1	; 37
    16f0:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    16f4:	f5 cf       	rjmp	.-22     	; 0x16e0 <main+0x2ec>
						btns[i] = 0;
    16f6:	10 82       	st	Z, r1
    16f8:	dd cf       	rjmp	.-70     	; 0x16b4 <main+0x2c0>

000016fa <__udivmodsi4>:
    16fa:	a1 e2       	ldi	r26, 0x21	; 33
    16fc:	1a 2e       	mov	r1, r26
    16fe:	aa 1b       	sub	r26, r26
    1700:	bb 1b       	sub	r27, r27
    1702:	fd 01       	movw	r30, r26
    1704:	0d c0       	rjmp	.+26     	; 0x1720 <__udivmodsi4_ep>

00001706 <__udivmodsi4_loop>:
    1706:	aa 1f       	adc	r26, r26
    1708:	bb 1f       	adc	r27, r27
    170a:	ee 1f       	adc	r30, r30
    170c:	ff 1f       	adc	r31, r31
    170e:	a2 17       	cp	r26, r18
    1710:	b3 07       	cpc	r27, r19
    1712:	e4 07       	cpc	r30, r20
    1714:	f5 07       	cpc	r31, r21
    1716:	20 f0       	brcs	.+8      	; 0x1720 <__udivmodsi4_ep>
    1718:	a2 1b       	sub	r26, r18
    171a:	b3 0b       	sbc	r27, r19
    171c:	e4 0b       	sbc	r30, r20
    171e:	f5 0b       	sbc	r31, r21

00001720 <__udivmodsi4_ep>:
    1720:	66 1f       	adc	r22, r22
    1722:	77 1f       	adc	r23, r23
    1724:	88 1f       	adc	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	1a 94       	dec	r1
    172a:	69 f7       	brne	.-38     	; 0x1706 <__udivmodsi4_loop>
    172c:	60 95       	com	r22
    172e:	70 95       	com	r23
    1730:	80 95       	com	r24
    1732:	90 95       	com	r25
    1734:	9b 01       	movw	r18, r22
    1736:	ac 01       	movw	r20, r24
    1738:	bd 01       	movw	r22, r26
    173a:	cf 01       	movw	r24, r30
    173c:	08 95       	ret

0000173e <__muluhisi3>:
    173e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__umulhisi3>
    1742:	a5 9f       	mul	r26, r21
    1744:	90 0d       	add	r25, r0
    1746:	b4 9f       	mul	r27, r20
    1748:	90 0d       	add	r25, r0
    174a:	a4 9f       	mul	r26, r20
    174c:	80 0d       	add	r24, r0
    174e:	91 1d       	adc	r25, r1
    1750:	11 24       	eor	r1, r1
    1752:	08 95       	ret

00001754 <__umulhisi3>:
    1754:	a2 9f       	mul	r26, r18
    1756:	b0 01       	movw	r22, r0
    1758:	b3 9f       	mul	r27, r19
    175a:	c0 01       	movw	r24, r0
    175c:	a3 9f       	mul	r26, r19
    175e:	70 0d       	add	r23, r0
    1760:	81 1d       	adc	r24, r1
    1762:	11 24       	eor	r1, r1
    1764:	91 1d       	adc	r25, r1
    1766:	b2 9f       	mul	r27, r18
    1768:	70 0d       	add	r23, r0
    176a:	81 1d       	adc	r24, r1
    176c:	11 24       	eor	r1, r1
    176e:	91 1d       	adc	r25, r1
    1770:	08 95       	ret

00001772 <_exit>:
    1772:	f8 94       	cli

00001774 <__stop_program>:
    1774:	ff cf       	rjmp	.-2      	; 0x1774 <__stop_program>
